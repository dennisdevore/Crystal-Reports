CREATE OR REPLACE package body zimportproc15 as
--
-- $Id: zim15body.sql
--

procedure begin_great_plains_hdr
(in_custid in varchar2
,out_errorno IN OUT NUMBER
,out_msg IN OUT varchar2
) is
startDate varchar2(20);
endDate varchar2(20);
viewcount integer;
strSuffix varchar2(32);
strDebugYN char(1);
curFunc integer;
cntRows integer;
cmdSql varchar2(20000);
logMsg varchar2(255);

procedure debugmsg(in_text varchar2) is

cntChar integer;
strMsg varchar2(255);
begin

if strDebugYN <> 'Y' then
  return;
end if;

cntChar := 1;
while (cntChar * 60) < (Length(in_text)+60)
loop
  zut.prt(substr(in_text,((cntChar-1)*60)+1,60));
  cntChar := cntChar + 1;
end loop;

exception when others then
  null;
end;


begin -- great plains header
/* This is the first of a two part export. The table generated by this
   procedure is exported and the the detail generation is invoked. The
   two files are then used for importing into Great Plains accounting
   software.
   The cleanu is handled by the detail export */

if out_errorno = -12345 then
  strDebugYN := 'Y';
  debugmsg('debug is on');
else
  strDebugYN := 'N';
end if;

out_msg := '';
out_errorno := 0;


select abbrev into startdate
   from lastgpbill_all
   where rtrim(code) = 'ALLALL';

select to_char(sysdate, 'YYMMDDHH24MISS') into endDate from dual;

debugmsg('start ' || startDate);

debugmsg('end   ' || endDate);

zms.log_autonomous_msg('IMPEXP', 'GPE', rtrim(in_custid), 'Start/End dates: '||StartDate||'...'||endDate, 'I', 'IMPEXP', logMsg);

update lastgpbill_all
   set abbrev = endDate
   where rtrim(code) = 'ALLALL';

viewcount := 1;
while(1=1)
loop
  strSuffix := translate(rtrim(upper(in_custid)),'----------','__________') || viewcount;
  cmdSql := 'create table bill_export_gp_hdr_' || strSuffix ||
    ' (dummy) as select 1 from dual';
  begin
    execute immediate cmdSql;
  exception when others then
    viewcount := viewcount + 1;
    goto continue_loop;
  end;
    exit;
<< continue_loop >>
  null;
end loop;

debugmsg('viewcount ' || viewcount);

cmdSql := 'drop table BILL_EXPORT_GP_HDR_' || strSuffix;
execute immediate cmdSql;
cmdSql := 'create table BILL_EXPORT_GP_HDR_' || strSuffix ||
' ( CUSTID varchar2(10), INVOICE number(8), DOCTYPE char(1), '||
  ' POSTDATE date, INVDATE date, AMOUNT varchar2(10), FACILITY varchar2(3))';
debugmsg(cmdSql);
curFunc := dbms_sql.open_cursor;
dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
cntRows := dbms_sql.execute(curFunc);
dbms_sql.close_cursor(curFunc);
debugmsg('insert');

cmdSql := 'insert into BILL_EXPORT_GP_HDR_' || strSuffix ||
' select ph.custid, ph.invoice, '||
' case when (select count(1) from postdtl pds '||
            ' where pds.invoice = ph.invoice '||
              ' and pds.account = (select defaultvalue from systemdefaults '||
                                  ' where defaultid = ''AR_ACCOUNT'') '||
                                  ' and pds.credit > 0) = 0 ' ||
     ' then ''1'' else ''6'' end, '||
' ph.postdate, ph.invdate,to_char(abs(ph.amount),''999999.99''), ' ||
' facility ' ||
' from posthdr ph '||
' where postdate >= to_date('''||startDate ||''',''YYMMDDHH24MISS'') '||
'   and postdate < to_date('''||endDate ||''',''YYMMDDHH24MISS'') ';
debugmsg(cmdsql);
curFunc := dbms_sql.open_cursor;
dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
cntRows := dbms_sql.execute(curFunc);
dbms_sql.close_cursor(curFunc);
commit;

/* make the request to export the detail lines /*
   loadno is used to pass the view number */
ziem.impexp_request('E',null,'ALL',' Great Plains Detail',null,'NOW',0,
0,0,'IMPEXP',null,null,null,'ALL','ALL',null,null,out_errorno,out_msg);


out_msg := 'OKAY';
out_errorno := viewcount;


exception when others then
   out_msg := 'zim15gph ' || sqlerrm;
   out_errorno := sqlcode;
end begin_great_plains_hdr;

procedure begin_great_plains_dtl
(in_custid in varchar2
,in_account_facility_yn varchar2
,out_errorno IN OUT NUMBER
,out_msg IN OUT varchar2
) is
viewcount integer;
strSuffix varchar2(32);
strDebugYN char(1);
curFunc integer;
cntRows integer;
cmdSql varchar2(20000);
TYPE cur_type is REF CURSOR;
cr cur_type;
dSeq number(8);
hFacility varchar2(3);
hInvoice number(8);
ARAccount varchar2(75);
cDist varchar2(4);
dInvoice number(8);
dAccount varchar2(75);
dCredit number;
dDebit number;
dDisttype varchar(2);
cursor C_PD(in_invoice number,in_account varchar2)
is
  select *
    from postdtl
   where invoice = in_invoice
     and account != in_account;


procedure debugmsg(in_text varchar2) is

cntChar integer;
strMsg varchar2(255);
begin

if strDebugYN <> 'Y' then
  return;
end if;

cntChar := 1;
while (cntChar * 60) < (Length(in_text)+60)
loop
  zut.prt(substr(in_text,((cntChar-1)*60)+1,60));
  cntChar := cntChar + 1;
end loop;

exception when others then
  null;
end;

procedure err_msg(in_msgtype varchar2) is
strMsg appmsgs.msgtext%type;
begin
  out_msg := 'Cust. ' || rtrim(in_custid) || ': ' || out_msg;
  zms.log_msg('IMPEXP', 'GPE', rtrim(in_custid),
    out_msg, nvl(in_msgtype,'E'), 'IMPEXP', strMsg);
end;

function inv_count
(in_Invoice IN number) return integer

is

out_count integer;

begin

select count(1) into out_count
   from invoicehdr
   where masterinvoice = in_invoice
     and invtype != 'C';

return out_count;

exception when others then
   return 0;
end inv_count;

function get_account_facility(in_facility varchar2, in_account varchar2)
return varchar2
is
begin
  if nvl(in_account_facility_yn, 'N') = 'Y' then
    return in_account ||'-'||in_facility;
  else
    return in_facility ||'-'||in_account;
  end if;
end;

begin -- great plains header
/* This is the second of a two part export. The table generated by this
   procedure is exported and the the detail generation is invoked. The
   two files are then used for importing into Great Plains accounting
   software.
   The cleanu is handled by the detail export */

if out_errorno = -12345 then
  strDebugYN := 'Y';
  debugmsg('debug is on');
else
  strDebugYN := 'N';
end if;

out_msg := '';
out_errorno := 0;

viewcount := 1;
while(1=1)
loop
  strSuffix := translate(rtrim(upper(in_custid)),'----------','__________') || viewcount;
  select count(1)
    into cntRows
    from user_tables
   where table_name = 'BILL_EXPORT_GP_HDR_' || strSuffix;
  if cntRows = 0 then
    exit;
  else
    viewcount := viewcount + 1;
  end if;
end loop;

viewcount := viewcount - 1;
if viewcount < 1 then
   out_msg := 'zim15gph - No Header Table';
   out_errorno := -1;
   return;
end if;
strSuffix := translate(rtrim(upper(in_custid)),'----------','__________') || viewcount;

debugmsg('viewcount ' || viewcount);


cmdSql := 'create table BILL_EXPORT_GP_DTL_' || strSuffix ||
' ( INVOICE number(8), ACCOUNT varchar2(77), DISTTYPE varchar(2), '||
  ' DEBIT number, CREDIT number, SEQ number(8), VDEBIT varchar2(10), VCREDIT varchar2(10), GLACCOUNT varchar2(255))';
debugmsg(cmdSql);
curFunc := dbms_sql.open_cursor;
dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
cntRows := dbms_sql.execute(curFunc);
dbms_sql.close_cursor(curFunc);

select nvl(defaultvalue, '(none)') into ARAccount
   from systemdefaults
   where defaultid = 'AR_ACCOUNT';

dSeq := 0;
cmdsql := 'select invoice,facility from BILL_EXPORT_GP_HDR_'||strSuffix || ' order by invoice';
debugmsg(cmdsql);
open cr for cmdsql;

loop
   fetch cr into hInvoice, hFacility;
   exit when cr%notfound;
   debugmsg('invoice ' || hinvoice);
   for cpd in C_PD(hInvoice, ARAccount) loop
      debugmsg(hInvoice || ' ' || cpd.account || ' ' || cpd.debit);
      if cpd.debit != 0 and cpd.credit != 0  then
         dSeq := dSeq + 1;
         if inv_count(hInvoice) > 0 then
            cDist := '9';
         else
            cDist := '19';
         end if;
         execute immediate 'insert into BILL_EXPORT_GP_DTL_'|| strSuffix ||
            ' values (:INVOICE, :ACCOUNT, :DISTYPE, :DEBIT, :CREDIT,:SEQ,:VDEBIT,:VCREDIT,:GLACCOUNT) '
         using hInvoice, get_account_facility(hFacility,cpd.account), cDist, cpd.debit, 0.0,dSeq,
               to_char(cpd.debit , 'FM999990.00'), '0.00', cpd.account;
         dSeq := dSeq + 1;
         execute immediate 'insert into BILL_EXPORT_GP_DTL_'|| strSuffix ||
            ' values (:INVOICE, :ACCOUNT, :DISTYPE, :DEBIT, :CREDIT,:SEQ,:VDEBIT,:VCREDIT,:GLACCOUNT) '
         using hInvoice, ARAccount, '3', 0.0, cpd.debit,dSeq,'0.00',to_char(cpd.debit, 'FM999990.00'), ARAccount;

         dSeq := dSeq + 1;
         execute immediate 'insert into BILL_EXPORT_GP_DTL_'|| strSuffix ||
            ' values (:INVOICE, :ACCOUNT, :DISTYPE, :DEBIT, :CREDIT,:SEQ,:VDEBIT,:VCREDIT,:GLACCOUNT) '
         using hInvoice, get_account_facility(hFacility,cpd.account),'9', 0.0, cpd.credit,dSeq,'0.00', to_char(cpd.credit, 'FM999990.00'), cpd.account;
         dSeq := dSeq + 1;
         execute immediate 'insert into BILL_EXPORT_GP_DTL_'|| strSuffix ||
            ' values (:INVOICE, :ACCOUNT, :DISTYPE, :DEBIT, :CREDIT,:SEQ,:VDEBIT,:VCREDIT,:GLACCOUNT) '
         using hInvoice, ARAccount, '3', cpd.credit, 0.0,dSeq, to_char(cpd.credit, 'FM999990.00'), '0.00',ARAccount;
      else
         dSeq := dSeq + 1;
         if cpd.credit = 0 then
            if inv_count(hInvoice) > 0 then
               cDist := '9';
            else
               cDist := '19';
            end if;
            execute immediate 'insert into BILL_EXPORT_GP_DTL_'|| strSuffix ||
               ' values (:INVOICE, :ACCOUNT, :DISTYPE, :DEBIT, :CREDIT,:SEQ,:VDEBIT,:VCREDIT,:GLACCOUNT) '
            using hInvoice, get_account_facility(hFacility,cpd.account), cDist, cpd.debit, cpd.credit,dSeq,
                  to_char(cpd.debit, 'FM999990.00'),to_char(cpd.credit, 'FM999990.00'),cpd.account;
         else
            execute immediate 'insert into BILL_EXPORT_GP_DTL_'|| strSuffix ||
               ' values (:INVOICE, :ACCOUNT, :DISTYPE, :DEBIT, :CREDIT,:SEQ,:VDEBIT,:VCREDIT,:GLACCOUNT) '
            using hInvoice, get_account_facility(hFacility,cpd.account), '9', cpd.debit, cpd.credit,dSeq,
                  to_char(cpd.debit, 'FM999990.00'),to_char(cpd.credit, 'FM999990.00'), cpd.account;
         end if;
         dSeq := dSeq + 1;
         execute immediate 'insert into BILL_EXPORT_GP_DTL_'|| strSuffix ||
            ' values (:INVOICE, :ACCOUNT, :DISTYPE, :DEBIT, :CREDIT,:SEQ,:VDEBIT,:VCREDIT,:GLACCOUNT) '
         using hInvoice, ARAccount, '3', cpd.credit, cpd.debit,dSeq,
               to_char(cpd.credit, 'FM999990.00'),to_char(cpd.debit, 'FM999990.00'), cpd.account;

      end if;
   end loop;
end loop;

close cr;

cmdSql := 'create table BILL_EXPORT_GP_DTS_' || strSuffix ||
' ( INVOICE number(8), ACCOUNT varchar2(77), DISTTYPE varchar(2), '||
  ' DEBIT number, CREDIT number, SEQ number(8), VDEBIT varchar2(10), VCREDIT varchar2(10))';
debugmsg(cmdSql);
curFunc := dbms_sql.open_cursor;
dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
cntRows := dbms_sql.execute(curFunc);
dbms_sql.close_cursor(curFunc);

dSeq := 0;
cmdsql := 'select invoice,account, disttype, sum(debit), sum(credit) '||
            ' from BILL_EXPORT_GP_DTL_'||strSuffix ||
            ' where disttype <> ''3'' ' ||
            ' group by invoice, account, disttype' ||
            ' order by invoice, account, disttype ';
debugmsg(cmdsql);
open cr for cmdsql;
loop
   fetch cr into dInvoice, dAccount, dDisttype, dDebit, dCredit;
   exit when cr%notfound;
   dSeq := dSeq + 1;
   execute immediate 'insert into BILL_EXPORT_GP_DTS_'|| strSuffix ||
      ' values (:INVOICE, :ACCOUNT, :DISTYPE, :DEBIT, :CREDIT,:SEQ, :VDEBIT, :VCREDIT) '
   using dInvoice, dAccount, dDisttype, dDebit, dCredit,dSeq,
         to_char(dDebit, 'FM999990.00'),to_char(dCredit, 'FM999990.00');

   dSeq := dSeq + 1;

   execute immediate 'insert into BILL_EXPORT_GP_DTS_'|| strSuffix ||
      ' values (:INVOICE, :ACCOUNT, :DISTYPE, :DEBIT, :CREDIT,:SEQ, :VDEBIT, :VCREDIT) '
   using dInvoice, ARAccount, '3', dCredit, dDebit,dSeq,
         to_char(dCredit, 'FM999990.00'), to_char(dDebit, 'FM999990.00');

end loop;
close cr;

out_msg := 'OKAY';
out_errorno := viewcount;


exception when others then
   out_msg := 'zim15gpd ' || sqlerrm;
   out_errorno := sqlcode;
end begin_great_plains_dtl;

procedure end_greatplains
(in_custid IN varchar2
,in_viewsuffix IN varchar2
,out_errorno IN OUT NUMBER
,out_msg IN OUT varchar2
)
is


curFunc integer;
cntRows integer;
cmdSql varchar2(20000);
strObject varchar2(32);
strSuffix varchar2(32);

begin

out_errorno := 0;
out_msg := '';

strSuffix := translate(rtrim(upper(in_custid)),'----------','__________') || in_viewsuffix;


cmdSql := 'drop table BILL_EXPORT_GP_DTL_' || strSuffix;
curFunc := dbms_sql.open_cursor;
dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
cntRows := dbms_sql.execute(curFunc);
dbms_sql.close_cursor(curFunc);

cmdSql := 'drop table BILL_EXPORT_GP_DTS_' || strSuffix;
curFunc := dbms_sql.open_cursor;
dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
cntRows := dbms_sql.execute(curFunc);
dbms_sql.close_cursor(curFunc);

cmdSql := 'drop table BILL_EXPORT_GP_HDR_' || strSuffix;
curFunc := dbms_sql.open_cursor;
dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
cntRows := dbms_sql.execute(curFunc);
dbms_sql.close_cursor(curFunc);


out_msg := 'OKAY';
out_errorno := 0;

exception when others then
  out_msg := 'zim15egp ' || sqlerrm;
  out_errorno := sqlcode;
end end_greatplains;

procedure begin_quickbooks
(in_custid in varchar2
,in_heading in number
,out_errorno IN OUT NUMBER
,out_msg IN OUT varchar2
) is
startDate varchar2(20);
endDate varchar2(20);
viewcount integer;
strSuffix varchar2(32);
strDebugYN char(1);
curFunc integer;
cntRows integer;
cntRcpt integer;
cmdSql varchar2(20000);
cCustid varchar2(20);
cName varchar2(40);
cContact varchar2(40);
cAddr1 varchar2(40);
cCSZ varchar2(50);
cFacility invoicehdr.facility%type;
revenueGroup activity.revenuegroup%type;
oPO varchar2(40);
Memo varchar2(20);
dMemo varchar2(200);
idAmt number(12,2);
ARDays number;
dueDate date;
fClass varchar2(20);
GLAccount varchar2(40);
IrisClass varchar2(8);
IrisName varchar2(4);
phInv invoicehdr.masterinvoice%type;
aDescription varchar2(40);
TRNS_HEADING2 varchar2(2000);
SPL_HEADING2 varchar2(2000);
GLLegerID facility.glid%type; 

cursor curPostHdr is
  select *
    from posthdr
    where postdate >= to_date(startDate ,'YYMMDDHH24MISS')
      and postdate < to_date(endDate ,'YYMMDDHH24MISS')
      and amount != 0;

cursor curInvoiceHdr(in_invoice number) is
  select *
    from invoicehdr
    where masterinvoice = to_char(in_invoice, 'FM09999999') ;

cursor curInvoiceHdrFac(in_invoice number) is
  select facility
    from invoicehdr
    where masterinvoice = to_char(in_invoice, 'FM09999999') ;

--cursor curInvoiceDtl(in_invoice number) is
--  select *
--    from invoicedtl
--    where invoice = in_invoice
--      and billedamt != 0;

cursor curInvoiceDtl(in_invoice number) is
  select activity, nvl(orderid, 0) as orderid, nvl(billedrate,0) as billedrate, sum(billedamt) as billedamt
    from invoicedtl
    where invoice = in_invoice
      and billedamt != 0
      and billstatus = '3'
    group by activity, orderid, billedrate;

cursor curCmt(in_invoice number, in_activity varchar2, in_orderid number,
        in_billedrate number)
is
select comment1
  from invoicedtl
    where invoice = in_invoice
      and billedamt != 0
      and billstatus = '3'
      and comment1 is not null
      and activity = in_activity
      and orderid = in_orderid
      and billedrate = in_billedrate;

Cmt curCmt%rowtype;

procedure debugmsg(in_text varchar2) is

cntChar integer;
strMsg varchar2(255);
begin

if strDebugYN <> 'Y' then
  return;
end if;

cntChar := 1;
while (cntChar * 60) < (Length(in_text)+60)
loop
  zut.prt(substr(in_text,((cntChar-1)*60)+1,60));
  cntChar := cntChar + 1;
end loop;

exception when others then
  null;
end;


begin

if out_errorno = -12345 then
  strDebugYN := 'Y';
  debugmsg('debug is on');
else
  strDebugYN := 'N';
end if;

out_msg := '';
out_errorno := 0;

TRNS_HEADING2 := '!TRNS,TRNSID,TRANSTYPE,DATE,ACCNT,NAME,CLASS,AMOUNT,DOCNUM,MEMO,CLEAR,TOPRINT,'||
                 'ADDR1,ADDR2,ADDR3,ADDR4,ADDR5,DUEDATE,TERMS,PAID,PAYMETH,SHIPVIA,SHIPDATE,REP,'||
                 'FOB,PONUM,INVTITLE,INVMEMO,SADDR1,SADDR2,SADDR3,SADDR4,SADDR5,NAMEISTAXABLE';
SPL_HEADING2 := '!SPL,TRANSID,TRANSTYPE,DATE,ACCNT,NAME,CLASS,AMOUNT,DOCNUM,MEMO,CLEAR,QNTY,PRICE,'||
                'INVITEM,PAYMETH,REIMBEXP,EXTRA,VALDAJ';

select abbrev into startdate
   from lastqbbill_all
   where rtrim(code) = 'ALLALL';

select to_char(sysdate, 'YYMMDDHH24MISS') into endDate from dual;

debugmsg('start ' || startDate);

debugmsg('end   ' || endDate);


update lastqbbill_all
   set abbrev = endDate
   where rtrim(code) = 'ALLALL';

viewcount := 1;
while(1=1)
loop
  strSuffix := translate(rtrim(upper(in_custid)),'----------','__________') || viewcount;
  select count(1)
    into cntRows
    from user_tables
   where table_name = 'BILL_EXPORT_QB_TF_' || strSuffix;
  if cntRows = 0 then
    exit;
  else
    viewcount := viewcount + 1;
  end if;
end loop;

debugmsg('viewcount ' || viewcount);

cmdSql := 'create table BILL_EXPORT_QB_TF_' || strSuffix || -- !TRNS fields
' ( CUSTID varchar2(10), MASTERINVOICE varchar2(8), ITEXT varchar2(255))';
curFunc := dbms_sql.open_cursor;
dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
cntRows := dbms_sql.execute(curFunc);
dbms_sql.close_cursor(curFunc);

cmdSql := 'create table BILL_EXPORT_QB_SF_' || strSuffix || --!SPL felds
' ( CUSTID varchar2(10), MASTERINVOICE varchar2(8), ITEXT varchar2(255))';
curFunc := dbms_sql.open_cursor;
dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
cntRows := dbms_sql.execute(curFunc);
dbms_sql.close_cursor(curFunc);

cmdSql := 'create table BILL_EXPORT_QB_EF_' || strSuffix || -- !ENDTRNS fields
' ( CUSTID varchar2(10), MASTERINVOICE varchar2(8), ITEXT varchar2(255))';
curFunc := dbms_sql.open_cursor;
dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
cntRows := dbms_sql.execute(curFunc);
dbms_sql.close_cursor(curFunc);

cmdSql := 'create table BILL_EXPORT_QB_TD_' || strSuffix || -- TRNS Data
' (CUSTID varchar2(10), MASTERINVOICE varchar2(8), TRNS varchar2(4), TRNSTYPE varchar2(20), '||
  'IDATE date, ACCNT varchar2(20), INAME varchar2(40), AMOUNT number(10,2), DOCNUM varchar2(20), '||
  'MEMO varchar(255), TOPRINT char(1), ADDR1 varchar2(40), ADDR2 varchar2(40), ADDR3 varchar2(40), '||
  'ADDR4 varchar2(40), DUEDATE date, CLASS varchar2(40), PONUM varchar2(40),  GLID varchar2(255))';
curFunc := dbms_sql.open_cursor;
dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
cntRows := dbms_sql.execute(curFunc);
dbms_sql.close_cursor(curFunc);

cmdSql := 'create table BILL_EXPORT_QB_SD_' || strSuffix || -- TRNS Data
' (CUSTID varchar2(10), MASTERINVOICE varchar2(8), INVOICE number(8), TRNS varchar2(4), TRNSTYPE varchar2(20), '||
  'IDATE date, ACCNT varchar2(20), INAME varchar2(40), AMOUNT number(10,2), DOCNUM varchar2(20), '||
  'MEMO varchar(90), PRICE number(10,2), INVITEM varchar2(40),CLASS varchar2(40), '||
  'IRISCLASS varchar2(8), IRISNAME varchar2(4), FACGLACCT varchar(40), GLACCTFAC varchar(40))';

curFunc := dbms_sql.open_cursor;
dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
cntRows := dbms_sql.execute(curFunc);
dbms_sql.close_cursor(curFunc);

cmdSql := 'create table BILL_EXPORT_QB_ED_' || strSuffix || -- !ENDTRNS fields
' ( CUSTID varchar2(10), MASTERINVOICE varchar2(8), ITEXT varchar2(255))';

curFunc := dbms_sql.open_cursor;
dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
cntRows := dbms_sql.execute(curFunc);
dbms_sql.close_cursor(curFunc);

begin
   select abbrev into ARDays
      from AR_DAYS
      where code = 'DAYS';
exception when others then
   ARDays := 30;
end;
Memo := null;

for ph in curPostHdr loop
   select to_char(ph.invoice, 'FM09999999') into phInv from dual;
   debugmsg('Master ' || phInv);
   if nvl(in_heading, 0) = 2 then
    cmdSql := 'insert into BILL_EXPORT_QB_TF_' || strSuffix ||
             ' (CUSTID, MASTERINVOICE, ITEXT) '||
             'values (''' || ph.custid|| ''',''' || phInv || ''',' ||
             ''''||TRNS_HEADING2||''''||')';
   else
   cmdSql := 'insert into BILL_EXPORT_QB_TF_' || strSuffix ||
             ' (CUSTID, MASTERINVOICE, ITEXT) '||
             'values (''' || ph.custid|| ''',''' || phInv || ''',' ||
             '''!TRNS,TRNSTYPE,DATE,ACCNT,NAME,AMOUNT,DOCNUM,MEMO,TOPRINT,ADDR1,ADDR2,ADDR3,ADDR4,DUEDATE,CLASS, '')';
   end if;
/*
   select count(1) into cntRcpt
      from invoicehdr
      where masterinvoice = to_char(ph.invoice, 'FM09999999')
        and invtype = 'R';
   if cntRcpt > 0 then
      cmdSql := cmdSql ||  '''!TRNS,TRNSTYPE,DATE,ACCNT,NAME,AMOUNT,DOCNUM,MEMO,TOPRINT,ADDR1,ADDR2,ADDR3,ADDR4,DUEDATE,CLASS,PONUM'')';
   else
      cmdSql := cmdSql || '''!TRNS,TRNSTYPE,DATE,ACCNT,NAME,AMOUNT,DOCNUM,MEMO,TOPRINT,ADDR1,ADDR2,ADDR3,ADDR4,DUEDATE,CLASS, '')';
   end if;
*/
   curFunc := dbms_sql.open_cursor;
   dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
   cntRows := dbms_sql.execute(curFunc);
   dbms_sql.close_cursor(curFunc);

   if nvl(in_heading, 0) = 2 then
   cmdSql := 'insert into BILL_EXPORT_QB_SF_' || strSuffix ||
             ' (CUSTID, MASTERINVOICE, ITEXT) '||
             'values (''' || ph.custid|| ''',''' || phInv || ''',' ||
             ''''||SPL_HEADING2||''''||')';
   else
     cmdSql := 'insert into BILL_EXPORT_QB_SF_' || strSuffix ||
             ' (CUSTID, MASTERINVOICE, ITEXT) '||
             'values (''' || ph.custid|| ''',''' || phInv || ''',' ||
             '''!SPL,TRNSTYPE,DATE,ACCNT,NAME,AMOUNT,DOCNUM,MEMO,PRICE,INVITEM,CLASS, , , , ,IRISCLASS'')';
   end if;
   curFunc := dbms_sql.open_cursor;
   dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
   cntRows := dbms_sql.execute(curFunc);
   dbms_sql.close_cursor(curFunc);

   cmdSql := 'insert into BILL_EXPORT_QB_EF_' || strSuffix ||
             ' (CUSTID, MASTERINVOICE, ITEXT) '||
             'values (''' || ph.custid|| ''',''' || phInv || ''',' ||
             '''!ENDTRNS, , , , , , , , , , , , , , , '')';
   curFunc := dbms_sql.open_cursor;
   dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
   cntRows := dbms_sql.execute(curFunc);
   dbms_sql.close_cursor(curFunc);

   begin
      select sum(decode(invtype,'C',-billedamt, billedamt)) into idAmt
         from invoicedtl
         where invoice in (select invoice from invoicehdr
                           where masterinvoice = to_char(ph.invoice, 'FM09999999'))
           and billstatus = '3';

   exception when others then
      idAmt := 0;
   end;

   if nvl(cCustid, 'X') != ph.custid then
      select custid, name,  contact,  addr1, rtrim(city) ||', '|| rtrim(state) || ' ' || rtrim(postalcode)
         into cCustid, cName, cContact, cAddr1, cCSZ
         from customer
         where custid = ph.custid;
   end if;

   open curInvoiceHdrFac(ph.invoice);
   fetch curInvoiceHdrFac into cFacility;
   close curInvoiceHdrFac;
   if cFacility is not null then
   begin
      select abbrev into fClass
         from QB_FAC_CLASS
         where code = cFacility;
   exception when others then
      fClass := 'Unknown';
   end;
   else
      fClass := 'Unknown';
   end if;

   select ph.invdate + ARDays into dueDate from dual;

    begin
       select glid
          into GLLegerID
          from facility
          where facility = cfacility;
    exception when others then
       GLLegerID := null;
    end;
   curFunc := dbms_sql.open_cursor;
   dbms_sql.parse(curFunc, 'insert into BILL_EXPORT_QB_TD_' || strSuffix ||
      ' values (:CUSTID, :MASTERINVOICE, :TRNS, :TRNSTYPE, '||
               ':IDATE, :ACCNT, :INAME, :AMOUNT, :DOCNUM, '||
               ':MEMO, :TOPRINT, :ADDR1, :ADDR2, :ADDR3, '||
               ':ADDR4, :DUEDATE, :CLASS, :PONUM, :GLID)',
      dbms_sql.native);

   dbms_sql.bind_variable(curFunc, ':CUSTID', ph.CUSTID);
   dbms_sql.bind_variable(curFunc, ':MASTERINVOICE', phInv);
   dbms_sql.bind_variable(curFunc, ':TRNS', 'TRNS');
   if idAmt < 0 then
       dbms_sql.bind_variable(curFunc, ':TRNSTYPE', 'CREDIT MEMO');
   else
       dbms_sql.bind_variable(curFunc, ':TRNSTYPE', 'INVOICE');
   end if;
   dbms_sql.bind_variable(curFunc, ':IDATE', ph.invdate);
   dbms_sql.bind_variable(curFunc, ':ACCNT', 'Accounts Receivable');
   dbms_sql.bind_variable(curFunc, ':INAME', cName);
   dbms_sql.bind_variable(curFunc, ':AMOUNT', idAmt);
   dbms_sql.bind_variable(curFunc, ':DOCNUM', phInv);
   dbms_sql.bind_variable(curFunc, ':MEMO', Memo);
   dbms_sql.bind_variable(curFunc, ':TOPRINT','N');
   dbms_sql.bind_variable(curFunc, ':ADDR1', cName);
   dbms_sql.bind_variable(curFunc, ':ADDR2', cContact);
   dbms_sql.bind_variable(curFunc, ':ADDR3', cAddr1);
   dbms_sql.bind_variable(curFunc, ':ADDR4', cCSZ);
   dbms_sql.bind_variable(curFunc, ':DUEDATE', dueDate);
   dbms_sql.bind_variable(curFunc, ':CLASS', fClass);
   dbms_sql.bind_variable(curFunc, ':PONUM', oPO);
   dbms_sql.bind_variable(curFunc, ':GLID', GLLegerID);
   cntRows := dbms_sql.execute(curFunc);
   dbms_sql.close_cursor(curFunc);



   cmdSql := 'insert into BILL_EXPORT_QB_ED_' || strSuffix ||
             ' (CUSTID, MASTERINVOICE, ITEXT) '||
             'values (''' || ph.custid|| ''',''' || phInv || ''',' ||
             '''ENDTRNS, , , , , , , , , , , , , , , '')';
   --debugmsg(cmdsql);
   curFunc := dbms_sql.open_cursor;
   dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
   cntRows := dbms_sql.execute(curFunc);
   dbms_sql.close_cursor(curFunc);



   for ih in curInvoiceHdr(ph.invoice) loop
      begin
         select sum(billedamt) into idAmt
            from invoicedtl
            where invoice = ih.invoice;
      exception when others then
         idAmt := 0;
      end;

      if idAmt != 0 then
         debugmsg('invoice ' || ih.invoice);

         begin
            select abbrev into fClass
               from QB_FAC_CLASS
               where code = ih.facility;
         exception when others then
            fClass := 'Unknown';
         end;
         for id in curInvoiceDtl(ih.invoice) loop
            debugmsg('   invoice dtl ' || id.activity || ' ' || id.orderid || ' ' || id.billedrate || ' ' || id.billedamt);

            begin
               select descr, glacct, revenueGroup, irisclass, irisname
                  into aDescription, GLAccount, revenueGroup, IrisClass, IrisName
                  from activity
                  where code = id.activity;
            exception when others then
               GLAccount := 'UNK';
            end;

            idAmt := id.billedamt;
            if nvl(ih.invtype,'X') != 'C' then
               idAmt := idAmt * -1;
            end if;

            select abbrev into dMemo
               from InvoiceTypes
               where code = ih.invtype;
            if ih.invtype = 'R' then
               dMemo := 'Order ' || id.orderid || ' - ' || rtrim(aDescription);

            elsif ih.invtype = 'A' then
               dMemo := 'Order ' || id.orderid || ' - ' || rtrim(aDescription);
            else
               dMemo := dMemo || ' - ' || rtrim(aDescription);
            end if;

            if idAmt > 0 then
                cmt := null;
                open curCmt(ih.invoice, id.activity, id.orderid, id.billedrate);
                fetch curCmt into Cmt;
                close curCmt;
                if cmt.comment1 is not null then
                    dMemo := translate(substr(cmt.comment1,1,120),
                            ''''||chr(10)||chr(12),'   ');

                    if instr(dMemo,',') > 0 then
                        dMemo := ''''||dMemo||'''';
                    end if;
                end if;
            end if;
            begin
               select glid
                  into GLLegerID
                  from facility
                  where facility = cfacility;
            exception when others then
               GLLegerID := null;
            end;
            curFunc := dbms_sql.open_cursor;
            dbms_sql.parse(curFunc, 'insert into BILL_EXPORT_QB_SD_' || strSuffix ||
               ' values (:CUSTID, :MASTERINVOICE, :INVOICE, :TRNS, :TRNSTYPE,'||
              ':IDATE, :ACCNT, :INAME, :AMOUNT, :DOCNUM,'||
              ':MEMO, :PRICE, :INVITEM , :CLASS, :IRISCLASS, :IRISNAME, :FACGLACCT, :GLACCTFAC)',
               dbms_sql.native);
            dbms_sql.bind_variable(curFunc, ':CUSTID', ih.CUSTID);
            dbms_sql.bind_variable(curFunc, ':MASTERINVOICE', ih.MASTERINVOICE);
            dbms_sql.bind_variable(curFunc, ':INVOICE', ih.INVOICE);
            dbms_sql.bind_variable(curFunc, ':TRNS', 'SPL');
            if idAmt > 0 then
               dbms_sql.bind_variable(curFunc, ':TRNSTYPE', 'CREDIT MEMO');
            else
                dbms_sql.bind_variable(curFunc, ':TRNSTYPE', 'INVOICE');
            end if;
            dbms_sql.bind_variable(curFunc, ':IDATE', ph.invdate);
            dbms_sql.bind_variable(curFunc, ':ACCNT', GLAccount);
            dbms_sql.bind_variable(curFunc, ':INAME', cName);
            dbms_sql.bind_variable(curFunc, ':AMOUNT', idAmt);
            dbms_sql.bind_variable(curFunc, ':DOCNUM', ih.masterinvoice);
            dbms_sql.bind_variable(curFunc, ':MEMO',dMemo);
            dbms_sql.bind_variable(curFunc, ':PRICE',id.billedrate);
            dbms_sql.bind_variable(curFunc, ':INVITEM', revenueGroup);
            dbms_sql.bind_variable(curFunc, ':CLASS', fClass);
            dbms_sql.bind_variable(curFunc, ':IRISCLASS', IrisClass);
            dbms_sql.bind_variable(curFunc, ':IRISNAME', IrisName);
            dbms_sql.bind_variable(curFunc, ':FACGLACCT', GLLegerID||GLAccount);
            dbms_sql.bind_variable(curFunc, ':GLACCTFAC', GLAccount||GLLegerID);
            cntRows := dbms_sql.execute(curFunc);
            dbms_sql.close_cursor(curFunc);

         end loop;

      end if;


   end loop;
end loop;

out_msg := 'OKAY';
out_errorno := viewcount;


exception when others then
   out_msg := 'zim15qbh ' || sqlerrm;
   out_errorno := sqlcode;
end begin_quickbooks;


procedure end_quickbooks
(in_custid IN varchar2
,in_viewsuffix IN varchar2
,out_errorno IN OUT NUMBER
,out_msg IN OUT varchar2
)
is

cmdSql varchar2(255);
strSuffix varchar2(32);

begin

out_errorno := 0;
out_msg := '';

strSuffix := translate(rtrim(upper(in_custid)),'----------','__________') || in_viewsuffix;

for obj in (select object_name, object_type
              from user_objects
             where object_name like 'BILL_EXPORT_QB_%_' || strSuffix
               and object_name != 'BILL_EXPORT_QB_TF_' || strSuffix )
loop

  cmdSql := 'drop ' || obj.object_type || ' ' || obj.object_name;

  execute immediate cmdSql;

end loop;

cmdsql := 'drop table BILL_EXPORT_QB_TF_' || strSuffix;
execute immediate cmdSql;

out_msg := 'OKAY';
out_errorno := 0;

exception when others then
  out_msg := 'zimesn945 ' || sqlerrm;
  out_errorno := sqlcode;
end end_quickbooks;

procedure begin_order_acknowledgment
(in_custid in varchar2
,in_importfileid in varchar2
,out_errorno IN OUT NUMBER
,out_msg IN OUT varchar2
) is
viewcount integer;
strSuffix varchar2(32);
strDebugYN char(1);
curFunc integer;
cntRows integer;
cmdSql varchar2(20000);

procedure debugmsg(in_text varchar2) is

cntChar integer;
strMsg varchar2(255);
begin

if strDebugYN <> 'Y' then
  return;
end if;

cntChar := 1;
while (cntChar * 60) < (Length(in_text)+60)
loop
  zut.prt(substr(in_text,((cntChar-1)*60)+1,60));
  cntChar := cntChar + 1;
end loop;

exception when others then
  null;
end;


begin

if out_errorno = -12345 then
  strDebugYN := 'Y';
  debugmsg('debug is on');
else
  strDebugYN := 'N';
end if;

out_msg := '';
out_errorno := 0;



viewcount := 1;
while(1=1)
loop
  strSuffix := translate(rtrim(upper(in_custid)),'----------','__________') || viewcount;
  select count(1)
    into cntRows
    from user_views
   where view_name = 'ORDER_ACK_' || strSuffix;
debugmsg('cntRows ' || cntRows);
  if cntRows = 0 then
    exit;
  else
    viewcount := viewcount + 1;
  end if;
end loop;

debugmsg('viewcount ' || viewcount);

cmdSql := 'create view ORDER_ACK_' || strSuffix ||
  '(importfileid, custid, po, reference, orderid, shipid, status, ackcomment, lastupdate) '||
  'as select upper(importfileid), custid, po, reference, orderid, shipid, status, ' ||
            'ackcomment, lastupdate ' ||
       'from import_order_acknowledgment ' ||
       'where upper(importfileid) = ''' || in_importfileid || '''';

debugmsg(cmdsql);
curFunc := dbms_sql.open_cursor;
dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
cntRows := dbms_sql.execute(curFunc);
dbms_sql.close_cursor(curFunc);

out_msg := 'OKAY';
out_errorno := viewcount;


exception when others then
   out_msg := 'zim15gph ' || sqlerrm;
   out_errorno := sqlcode;
end begin_order_acknowledgment;

procedure end_order_acknowledgment
(in_custid IN varchar2
,in_viewsuffix IN varchar2
,out_errorno IN OUT NUMBER
,out_msg IN OUT varchar2
)
is
curFunc integer;
cntRows integer;
cmdSql varchar2(20000);
strSuffix varchar2(32);

begin

out_errorno := 0;
out_msg := '';

strSuffix := translate(rtrim(upper(in_custid)),'----------','__________') || in_viewsuffix;


cmdSql := 'drop view ORDER_ACK_' || strSuffix;
curFunc := dbms_sql.open_cursor;
dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
cntRows := dbms_sql.execute(curFunc);
dbms_sql.close_cursor(curFunc);

out_msg := 'OKAY';
out_errorno := 0;

exception when others then
  out_msg := 'zim15eoa ' || sqlerrm;
  out_errorno := sqlcode;
end end_order_acknowledgment;

procedure begin_sage
(in_custid in varchar2
,in_begdatestr IN varchar2
,in_enddatestr IN varchar2
,in_combine_iditem_yn in varchar2
,out_errorno IN OUT NUMBER
,out_msg IN OUT varchar2
) is
viewcount integer;
strSuffix varchar2(32);
strDebugYN char(1);
curFunc integer;
cntRows integer;
cntRcpt integer;
cmdSql varchar2(20000);
dteTest date;
hdrCnt integer := 0;
itmCnt integer;
iditem varchar2(50);
texttrx char(1);
cntCredit integer;
facGLID facility.glid%type;
cursor curPostHdr is
  select *
    from posthdr
    where postdate >= to_date(in_begdatestr ,'YYYYMMDDHH24MISS')
      and postdate < to_date(in_enddatestr ,'YYYYMMDDHH24MISS')
      and amount != 0;

cursor curInvoiceDtl(in_invoice number) is
   select ih.facility, id.custid, nvl(a.glacct,id.activity) as glacct, id.calceduom, sum(id.billedamt) as billedamt
   from invoicehdr ih, invoicedtl id, activity a
   where ih.masterinvoice = to_char(in_invoice, 'FM09999999')
     and ih.invstatus = '3'
     and ih.invoice = id.invoice
     and id.billstatus = '3'
     and id.activity = a.code(+)
   group by ih.facility, id.custid, nvl(a.glacct,id.activity), id.calceduom;

procedure debugmsg(in_text varchar2) is

cntChar integer;
strMsg varchar2(255);
begin

if strDebugYN <> 'Y' then
  return;
end if;

cntChar := 1;
while (cntChar * 60) < (Length(in_text)+60)
loop
  zut.prt(substr(in_text,((cntChar-1)*60)+1,60));
  cntChar := cntChar + 1;
end loop;

exception when others then
  null;
end;


begin

if out_errorno = -12345 then
  strDebugYN := 'Y';
  debugmsg('debug is on');
else
  strDebugYN := 'N';
end if;

out_msg := '';
out_errorno := 0;


begin
  dteTest := to_date(in_begdatestr,'yyyymmddhh24miss');
exception when others then
  out_errorno := -1;
  out_msg := 'Invalid begin date string ' || in_begdatestr;
  return;
end;
begin
  dteTest := to_date(in_enddatestr,'yyyymmddhh24miss');
exception when others then
  out_errorno := -2;
  out_msg := 'Invalid end date string ' || in_enddatestr;
  return;
end;


viewcount := 1;
while(1=1)
loop
  strSuffix := translate(rtrim(upper(in_custid)),'----------','__________') || viewcount;
  select count(1)
    into cntRows
    from user_tables
   where table_name = 'SAGE_HDR_' || strSuffix;
  if cntRows = 0 then
    exit;
  else
    viewcount := viewcount + 1;
  end if;
end loop;

debugmsg('viewcount ' || viewcount);

cmdSql := 'create table SAGE_HDR_' || strSuffix ||
' (RECTYPE CHAR(1), CNTBTCH CHAR(1), CNTITEM INTEGER, IDCUST VARCHAR2(255), ' ||
' IDINVC NUMBER(8), SPECINST CHAR(1), CUSTPO CHAR(1), DATEINVC VARCHAR2(10), TEXTTRX CHAR(1))';
curFunc := dbms_sql.open_cursor;
dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
cntRows := dbms_sql.execute(curFunc);
dbms_sql.close_cursor(curFunc);

cmdSql := 'create table SAGE_DTL_' || strSuffix ||
'(RECTYPE CHAR(1),CNTBTCH CHAR(1),CNTITEM INTEGER,CNTLINE INTEGER,TEXTDESC CHAR(1), ' ||
'AMTEXTN NUMBER(10,2),IDitem varchar2(50),UNITMEAS VARCHAR2(4),NULLCOMMENT CHAR(1)) ';
curFunc := dbms_sql.open_cursor;
dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
cntRows := dbms_sql.execute(curFunc);
dbms_sql.close_cursor(curFunc);


for ph in curPostHdr loop
   hdrCnt := hdrCnt + 1;
   select count(1) into cntCredit
      from invoicehdr
      where masterinvoice = to_char(ph.invoice, 'FM09999999')
        and invtype = 'C';
   if cntCredit > 0 then
      texttrx := '3';
   else
      texttrx := '1';
   end if;
   debugmsg('Master ' || ph.invoice);
   cmdSql := 'insert into SAGE_HDR_' || strSuffix ||
      ' (RECTYPE, CNTBTCH, CNTITEM, IDCUST, ' ||
      ' IDINVC, SPECINST, CUSTPO , DATEINVC, TEXTTRX) ' ||
      'values (''1'', ''1'', '||hdrCnt || ',''' || ph.custid || ''', '||
               ph.invoice || ', null, null, ''' || to_char(ph.invdate, 'MM/DD/YYYY') || ''', ''' ||
      texttrx || ''' )';
   debugmsg(cmdSql);
   curFunc := dbms_sql.open_cursor;
   dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
   cntRows := dbms_sql.execute(curFunc);
   dbms_sql.close_cursor(curFunc);
   itmCnt := 0;
   for id in curInvoiceDtl(ph.invoice)  loop
      itmCnt := itmCnt + 1;
      if nvl(in_combine_iditem_yn, 'N') = 'Y' then
         begin
             select glid into facGLID
                from facility
                where facility = id.facility;
         exception when no_data_found then
            facGLID := null;
         end;
         idItem := id.glacct || facGLID;
      else
         idItem := id.glacct;
      end if;
      cmdSql := 'insert into SAGE_DTL_' || strSuffix ||
         '(RECTYPE, CNTBTCH,CNTITEM,CNTLINE,TEXTDESC, ' ||
         'AMTEXTN,IDITEM,UNITMEAS,NULLCOMMENT) ' ||
         ' values (''2'', ''1'', ' || hdrCnt || ', ' || itmCnt ||', null, ' ||
         id.billedamt || ', ''' || idItem || ''', ''' || id.calceduom || ''', null)';
      curFunc := dbms_sql.open_cursor;
      dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
      cntRows := dbms_sql.execute(curFunc);
      dbms_sql.close_cursor(curFunc);
   end loop;
end loop;

out_msg := 'OKAY';
out_errorno := viewcount;


exception when others then
   out_msg := 'zim15bs ' || sqlerrm;
   out_errorno := sqlcode;
end begin_sage;


procedure end_sage
(in_custid IN varchar2
,in_viewsuffix IN varchar2
,out_errorno IN OUT NUMBER
,out_msg IN OUT varchar2
)
is

cmdSql varchar2(255);
strSuffix varchar2(32);

begin

out_errorno := 0;
out_msg := '';

strSuffix := translate(rtrim(upper(in_custid)),'----------','__________') || in_viewsuffix;

cmdsql := 'drop table SAGE_DTL_' || strSuffix;
execute immediate cmdSql;

cmdsql := 'drop table SAGE_HDR_' || strSuffix;
execute immediate cmdSql;

out_msg := 'OKAY';
out_errorno := 0;

exception when others then
  out_msg := 'zim15es ' || sqlerrm;
  out_errorno := sqlcode;
end end_sage;

procedure begin_sage_sp1
(in_custid in varchar2
,out_errorno IN OUT NUMBER
,out_msg IN OUT varchar2
) is
startDate varchar2(20);
endDate varchar2(20);
viewcount integer;
strSuffix varchar2(32);
strDebugYN char(1);
curFunc integer;
cntRows integer;
cmdSql varchar2(20000);
logMsg varchar2(255);

prevInvoiceNo number(15) := -1;
lineNo        number(10) := -1;

function calcDueDate (in_custId varchar2) 
  return number is

  l_invoiceTermDays  number(10);
begin

  SELECT it.abbrev
    INTO l_invoiceTermDays
    FROM customer c
       , customer_aux ca
	   , invoiceTerms it
   WHERE c.custid = in_custid
     AND c.custid = ca.custid
	 AND ca.invoiceterms_code = it.code;
     
    return l_invoiceTermDays;

   exception
   when others then
     zms.log_autonomous_msg('IMPEXP', 'SAGE_SP1', rtrim(in_custid), 'Invalid numeric value for invoice terms [' || l_invoiceTermDays || '] defaulting to 30 days', 'E', 'IMPEXP', logMsg);
     return 30;
end;

procedure debugmsg(in_text varchar2) is

cntChar integer;
strMsg varchar2(255);
begin

if strDebugYN <> 'Y' then
  return;
end if;

cntChar := 1;
while (cntChar * 60) < (Length(in_text)+60)
loop
  zut.prt(substr(in_text,((cntChar-1)*60)+1,60));
  cntChar := cntChar + 1;
end loop;

exception when others then
  null;
end;


begin -- Sage SP1 custom export for Peoples

if out_errorno = -12345 then
  strDebugYN := 'Y';
  debugmsg('debug is on');
else
  strDebugYN := 'N';
end if;

out_msg := '';
out_errorno := 0;

select abbrev into startdate
   from lastSageSp1Bill_all	
   where rtrim(code) = 'ALLALL';

select to_char(sysdate, 'YYMMDDHH24MISS') into endDate from dual;

debugmsg('start ' || startDate);
debugmsg('end   ' || endDate);

zms.log_autonomous_msg('IMPEXP', 'SAGESP1', rtrim(in_custid), 'Start/End dates: '||StartDate||'...'||endDate, 'E', 'IMPEXP', logMsg);

update lastSageSp1Bill_all
   set abbrev = endDate
   where rtrim(code) = 'ALLALL';

viewcount := 1;
while(1=1)
loop
  strSuffix := translate(rtrim(upper(in_custid)),'----------','__________') || viewcount;
  cmdSql := 'create table BILL_EXPORT_SAGE_SP1_' || strSuffix ||
    ' (dummy) as select 1 from dual';
  begin
    execute immediate cmdSql;
  exception when others then
    viewcount := viewcount + 1;
    goto continue_loop;
  end;
    exit;
<< continue_loop >>
  null;
end loop;

debugmsg('viewcount ' || viewcount);

cmdSql := 'drop table BILL_EXPORT_SAGE_SP1_' || strSuffix;
execute immediate cmdSql;

cmdSql := 'create table BILL_EXPORT_SAGE_SP1_' || strSuffix ||
' ( MASTERINVOICE     varchar2(8), 
    CUSTOMER_ID       varchar2(10), 
    INVOICE_DATE      date, 
    POST_DATE         date,
    DUE_DATE          date,
    AMOUNT            number(12,2), 
    LINE_NO           number(10),
    INVOICE           number(12,0), 
    GLACCT            varchar2(20), 
    FACILITY_GLID     varchar2(20), 
    BILLEDAMT         number(10,2)
   )
';

debugmsg(cmdSql);
curFunc := dbms_sql.open_cursor;
dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
cntRows := dbms_sql.execute(curFunc);
dbms_sql.close_cursor(curFunc);

debugmsg('insert');

FOR rec IN (
    SELECT
        *
    FROM
        BILL_EXPORT_SAGE_SP1
    WHERE
        POST_DATE >  TO_DATE(startdate, 'YYMMDDHH24MISS') 
	AND POST_DATE <= TO_DATE(enddate, 'YYMMDDHH24MISS')
    ORDER BY
        customer_id,
        masterinvoice,
        invoice,
        glacct,
        billedamt
) LOOP

  if prevInvoiceNo != rec.masterinvoice then --header record + first detail line
     prevInvoiceNo := rec.masterinvoice;
     lineNo := 1;
     rec.LINE_NO := lineNo;
     rec.DUE_DATE := rec.INVOICE_DATE + calcDueDate(rec.CUSTOMER_ID);
     
  else 
     lineNo := lineNo + 1;
     rec.LINE_NO := lineNo;
     rec.POST_DATE := null;
     rec.INVOICE_DATE := null;
     rec.DUE_DATE := null;
     rec.AMOUNT := null;
  end if;
  
  execute immediate  'insert into BILL_EXPORT_SAGE_SP1_' || strSuffix ||
  ' values (  :MASTERINVOICE, :CUSTOMER_ID, :INVOICE_DATE, :POST_DATE, :DUE_DATE, :AMOUNT, :LINE_NO, :INVOICE, :GLACCT, :FACILITY_GLID, :BILLEDAMT )'
  using
   rec.MASTERINVOICE,
   rec.CUSTOMER_ID,
   rec.INVOICE_DATE,
   rec.POST_DATE,
   rec.DUE_DATE,
   rec.AMOUNT,
   rec.LINE_NO,
   rec.INVOICE,
   rec.GLACCT,
   rec.FACILITY_GLID,
   rec.BILLEDAMT;
 
  commit;

end Loop;

--Let's create a header record
execute immediate  'create table SAGE_SP1_HEADER_' || strSuffix || 
   '(     donotimport                   varchar2(50)
        , batch_title                   varchar2(50)
        , invoice_no                    varchar2(50)
        , po_no                         varchar2(50)
        , customer_id                   varchar2(50)
        , posting_date                  varchar2(50)
        , created_date                  varchar2(50)
        , due_date                      varchar2(50)
        , total_due                     varchar2(50)
        , total_paid                    varchar2(50)
        , paid_date                     varchar2(50)
        , term_name                     varchar2(50)
        , description                   varchar2(50)
        , basecurr                      varchar2(50)
        , currency                      varchar2(50)
        , exch_rate_date                varchar2(50)
        , exch_rate_type_id             varchar2(50)
        , exchange_rate                 varchar2(50)
        , line_no                       varchar2(50)
        , memo                          varchar2(50)
        , acct_no                       varchar2(50)
        , acct_label                    varchar2(50)
        , location_id                   varchar2(50)
        , dept_id                       varchar2(50)
        , allocation_id                 varchar2(50)
        , amount                        varchar2(50)
        , subtotal                      varchar2(50)
        , revrec_template               varchar2(50)
        , revrec_startdate              varchar2(50)
        , deferredrev_account           varchar2(50)
        , revrec_journal                varchar2(50)
        , revrec_schedule_line_no       varchar2(50)
        , revenue_account               varchar2(50)
        , revrec_postingdate            varchar2(50)
        , revrec_amount                 varchar2(50)
        , arinvoiceitem_araccount       varchar2(50)
        , action                        varchar2(50)
        , supdocid                      varchar2(50)
        , billto                        varchar2(50)
        , shipto                        varchar2(50)
        , revrec_enddate                varchar2(50)
        , bdc_invoiceid                 varchar2(50)
        , bdc_orgid                     varchar2(50)
        , bdc_url_prefix                varchar2(50)
    )';

execute immediate  'insert into SAGE_SP1_HEADER_' || strSuffix || 
' values ( :donotimport,:batch_title,:invoice_no,:po_no,:customer_id,:posting_date,:created_date,:due_date,:total_due,:total_paid,:paid_date,:term_name,
           :description,:basecurr,:currency,:exch_rate_date,:exch_rate_type_id,:exchange_rate,:line_no,:memo,:acct_no,:acct_label,:location_id,:dept_id,:allocation_id,
           :amount,:subtotal,:revrec_template,:revrec_startdate,:deferredrev_account,:revrec_journal,:revrec_schedule_line_no,:revenue_account,:revrec_postingdate,
           :revrec_amount,:arinvoiceitem_araccount,:action,:supdocid,:billto,:shipto,:revrec_enddate,:bdc_invoiceid,:bdc_orgid,:bdc_url_prefix
         )'
  using    'DONOTIMPORT','BATCH_TITLE','INVOICE_NO','PO_NO','CUSTOMER_ID','POSTING_DATE','CREATED_DATE','DUE_DATE','TOTAL_DUE','TOTAL_PAID','PAID_DATE','TERM_NAME',
           'DESCRIPTION','BASECURR','CURRENCY','EXCH_RATE_DATE','EXCH_RATE_TYPE_ID','EXCHANGE_RATE','LINE_NO','MEMO','ACCT_NO','ACCT_LABEL','LOCATION_ID','DEPT_ID','ALLOCATION_ID',
           'AMOUNT','SUBTOTAL','REVREC_TEMPLATE','REVREC_STARTDATE','DEFERREDREV_ACCOUNT','REVREC_JOURNAL','REVREC_SCHEDULE_LINE_NO','REVENUE_ACCOUNT','REVREC_POSTINGDATE',
           'REVREC_AMOUNT','ARINVOICEITEM_ARACCOUNT','ACTION','SUPDOCID','BILLTO','SHIPTO','REVREC_ENDDATE','BDC_INVOICEID','BDC_ORGID','BDC_URL_PREFIX';

commit;

out_msg := 'OKAY';
out_errorno := viewcount;

exception when others then
   out_msg := 'zim15sagesp1 ' || sqlerrm;
   out_errorno := sqlcode;
   
end begin_sage_sp1;

procedure end_sage_sp1
(in_custid in varchar2
,in_viewsuffix IN varchar2
,out_errorno IN OUT NUMBER
,out_msg IN OUT varchar2
) is
curFunc integer;
cntRows integer;
cmdSql varchar2(20000);
strObject varchar2(32);
strSuffix varchar2(32);

begin

out_errorno := 0;
out_msg := '';

strSuffix := translate(rtrim(upper(in_custid)),'----------','__________') || in_viewsuffix;

for obj in (select object_name, object_type
              from user_objects
             where object_name like 'BILL_EXPORT_SAGE_SP1\_%'  escape '\' 
                or object_name like 'SAGE_SP1_HEADER\_%'       escape '\' 
) loop

  execute immediate 'drop ' || obj.object_type || ' ' || obj.object_name;

end loop;

out_msg := 'OKAY';
out_errorno := 0;

exception when others then
  out_msg := 'zim15esagesp1 ' || sqlerrm;
  out_errorno := sqlcode;
end end_sage_sp1;


procedure begin_peachtree
(in_custid in varchar2
,in_facility_gl_yn in varchar2
,out_errorno IN OUT NUMBER
,out_msg IN OUT varchar2
) is


startDate varchar2(20);
endDate varchar2(20);
viewcount integer;
strSuffix varchar2(32);
strDebugYN char(1);
curFunc integer;
cntRows integer;
cntRcpt integer;
cmdSql varchar2(20000);
ARDays number;
ARAccount varchar2(75);
phInv invoicehdr.masterinvoice%type;
cntCM integer;
useInvoice number;
applyTo number;
amt number;
strAccount postdtl.account%type;
creditMemo varchar2(5);
numberOfDistributions number;
cursor curPostHdr is
  select *
    from posthdr
    where postdate >= to_date(startDate ,'YYMMDDHH24MISS')
      and postdate < to_date(endDate ,'YYMMDDHH24MISS')
      and amount != 0;

cursor curPostDtl (in_invoice number, in_account varchar2)  is
   select *
     from postdtl
     where invoice = in_invoice
       and account <> in_account;

procedure debugmsg(in_text varchar2) is

cntChar integer;
strMsg varchar2(255);
begin

if strDebugYN <> 'Y' then
  return;
end if;

cntChar := 1;
while (cntChar * 60) < (Length(in_text)+60)
loop
  zut.prt(substr(in_text,((cntChar-1)*60)+1,60));
  cntChar := cntChar + 1;
end loop;

exception when others then
  null;
end;


begin

if out_errorno = -12345 then
  strDebugYN := 'Y';
  debugmsg('debug is on');
else
  strDebugYN := 'N';
end if;

out_msg := '';
out_errorno := 0;



select abbrev into startdate
   from lastptbill_all
   where rtrim(code) = 'ALLALL';

select to_char(sysdate, 'YYMMDDHH24MISS') into endDate from dual;

debugmsg('start ' || startDate);

debugmsg('end   ' || endDate);


update lastptbill_all
   set abbrev = endDate
   where rtrim(code) = 'ALLALL';

viewcount := 1;
while(1=1)
loop
  strSuffix := translate(rtrim(upper(in_custid)),'----------','__________') || viewcount;
  --zms.log_autonomous_msg('IMPEXP', 'GPE', rtrim(in_custid),
  --  'PEACHTREE_EXPORT_'||strsuffix, 'I', 'IMPEXP', out_msg);

  select count(1)
    into cntRows
    from user_tables
   where table_name = 'PEACHTREE_EXPORT_' || strSuffix;
  if cntRows = 0 then
    exit;
  else
    viewcount := viewcount + 1;
  end if;
end loop;

debugmsg('viewcount ' || viewcount);

cmdSql := 'create table peachtree_export_' || strSuffix ||
' (CUSTID varchar2(10), INVOICE number, USEINVOICE number, CREDITMEMO varchar2(5), ' ||
' POSTDATE date, DUEDATE date, ARACCOUNT varchar2(10), NUMBEROFDISTRIBUTIONS number, ' ||
' APPLYTOINVOICEDISTRIBUTION varchar2(3), GLACCOUNT varchar2(10), DEBITCREDIT number, ' ||
' TAXTYPE char(1), INVDATE DATE, INVDUEDATE date)';
curFunc := dbms_sql.open_cursor;
dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
cntRows := dbms_sql.execute(curFunc);
dbms_sql.close_cursor(curFunc);

begin
   select abbrev into ARDays
      from AR_DAYS
      where code = 'DAYS';
exception when others then
   ARDays := 30;
end;

select nvl(defaultvalue, '(none)') into ARAccount
   from systemdefaults
   where defaultid = 'AR_ACCOUNT';

for ph in curPostHdr loop
   select to_char(ph.invoice, 'FM09999999') into phInv from dual;
   debugmsg('Master ' || phInv);
   select count(1) into cntCM
      from invoicehdr
      where masterinvoice = phInv
        and invtype = 'C'
        and invstatus = '3';
   begin
       select to_number(min(id.useinvoice)) into useInvoice
         from invoicedtl id, invoicehdr ih
         where ih.masterinvoice = to_char(ph.invoice, 'FM09999999')
           and id.invoice = ih.invoice;
   exception when no_data_found then
      useInvoice := null;
   end;
   if cntCM > 0 then
      applyTo := 0;
      creditMemo := 'TRUE';
   else
      applyTo := null;
      creditMemo := 'FALSE';
   end if;
   select count(1) into numberOfDistributions
      from postdtl
      where invoice = ph.invoice
        and account <> ARAccount;

   for pd in curPostDtl(ph.invoice, ARAccount) loop
      if applyTo is not null then
         applyTo := applyTo + 1;
      end if;
      if cntCM > 0 then
         amt := pd.debit;
      else
         if pd.credit = 0 then
            amt := pd.debit;
         else
            amt := -1 * pd.credit;
         end if;
      end if;
      strAccount := pd.account;
      if nvl(in_facility_gl_yn, 'N') = 'Y' then
         select substr(pd.account, 1, 5) ||
                decode(substr(pd.account, 6, 2), 'XX', substr(ph.facility, 1, 2), substr(pd.account, 6, 2)) ||
                substr(pd.account, 8, 3) into strAccount from dual;
      end if;
      curFunc := dbms_sql.open_cursor;
      dbms_sql.parse(curFunc, 'insert into peachtree_export_' || strSuffix ||
         ' values (:CUSTID, :INVOICE, :USEINVOICE, :CREDITMEMO, ' ||
                 ' :POSTDATE, :DUEDATE, :ARACCOUNT, :NUMBEROFDISTRIBUTIONS, ' ||
                 ' :APPLYTOINVOICEDISTRIBUTION, :GLACCOUNT, :DEBITCREDIT, ' ||
                 ' :TAXTYPE, :INVDATE, :INVDUEDATE)',
         dbms_sql.native);
      dbms_sql.bind_variable(curFunc, ':CUSTID', ph.custid);
      dbms_sql.bind_variable(curFunc, ':INVOICE', ph.invoice);
      dbms_sql.bind_variable(curFunc, ':USEINVOICE', useInvoice);
      dbms_sql.bind_variable(curFunc, ':CREDITMEMO', creditMemo);
      dbms_sql.bind_variable(curFunc, ':POSTDATE', ph.postdate);
      dbms_sql.bind_variable(curFunc, ':DUEDATE', ph.invdate + ARDays);
      dbms_sql.bind_variable(curFunc, ':ARACCOUNT', ARAccount);
      dbms_sql.bind_variable(curFunc, ':NUMBEROFDISTRIBUTIONS', numberOfDistributions);
      dbms_sql.bind_variable(curFunc, ':APPLYTOINVOICEDISTRIBUTION', applyTo);
      dbms_sql.bind_variable(curFunc, ':GLACCOUNT', strAccount);
      dbms_sql.bind_variable(curFunc, ':DEBITCREDIT', amt);
      dbms_sql.bind_variable(curFunc, ':TAXTYPE', '1');
      dbms_sql.bind_variable(curFunc, ':INVDATE', ph.invdate);
      dbms_sql.bind_variable(curFunc, ':INVDUEDATE', ph.invdate + ARDays);
      cntRows := dbms_sql.execute(curFunc);
      dbms_sql.close_cursor(curFunc);
   end loop;

end loop;

out_msg := 'OKAY';
out_errorno := viewcount;


exception when others then
   out_msg := 'zim15qbh ' || sqlerrm;
   out_errorno := sqlcode;
end begin_peachtree;


procedure end_peachtree
(in_custid IN varchar2
,in_viewsuffix IN varchar2
,out_errorno IN OUT NUMBER
,out_msg IN OUT varchar2
)
is

cmdSql varchar2(255);
strSuffix varchar2(32);

begin

out_errorno := 0;
out_msg := '';

strSuffix := translate(rtrim(upper(in_custid)),'----------','__________') || in_viewsuffix;

cmdsql := 'drop table PEACHTREE_EXPORT_' || strSuffix;
execute immediate cmdSql;

out_msg := 'OKAY';
out_errorno := 0;

exception when others then
  out_msg := 'ept ' || sqlerrm;
  out_errorno := sqlcode;
end end_peachtree;

procedure begin_lawson_hdr_dbarait
(in_custid IN varchar2
,out_errorno IN OUT NUMBER
,out_msg IN OUT varchar2
) is

curFunc integer;
cntRows integer;
cmdSql varchar2(32767);
startDate varchar2(20);
endDate varchar2(20);
strDebugYN char(1);

curCompany integer;
cmdSqlCompany varchar2(255);
tblCompany varchar2(12);
tblWarehouse varchar2(12);
strSuffix varchar2(32);
viewcount integer;

  CURSOR C_PH(in_begin char, in_end char)
  IS
    SELECT *
      FROM posthdr
     WHERE postdate >= to_date(in_begin, 'YYMMDDHH24MISS')
       AND postdate < to_date(in_end, 'YYMMDDHH24MISS');

  CURSOR C_INVOICE(in_master char)
  RETURN invoicehdr%rowtype
  IS
    SELECT *
      FROM invoicehdr
     WHERE masterinvoice = in_master
     ORDER BY invtype, invoice;

  CURSOR C_FACILITY(in_facility char)
  RETURN facility%rowtype
  IS
    SELECT *
      FROM facility
     WHERE facility = in_facility;

  masterinvoice varchar2(8);
  IH invoicehdr%rowtype;
  FA facility%rowtype;
  CTOT invoicehdr%rowtype;
  l_prefix    varchar2(2);
  FSHIPPER varchar2(40);


    CURSOR C_INVTOTAL(in_master varchar2)
  IS
    SELECT H.custid, H.invoicedate, H.facility,nvl(I.po,'null'),
        SUM(nvl(decode(H.invtype,'C',
                  decode(sign(I.billedamt),-1,abs(I.billedamt),0),
                  decode(sign(I.billedamt),-1,0,abs(I.billedamt))
                    ),0)),
        SUM(nvl(decode(H.invtype,'C',
                  decode(sign(I.billedamt),-1,0,abs(I.billedamt)),
                  decode(sign(I.billedamt),-1,abs(I.billedamt),0)
                    ),0)),sum(I.billedamt) ,H.invoice,SUBSTR(I.statususer, 1,4),
      decode(substr(SUBSTR(H.FACILITY, 2,3),1,1), '0',substr(SUBSTR(H.FACILITY, 2,3),2,1) , SUBSTR(H.FACILITY, 2,3)) as short_facility
      FROM invoicedtl I, invoicehdr H
     WHERE H.masterinvoice = in_master
       AND H.invoice = I.invoice(+)
       AND I.billstatus(+) != zbill.DELETED
      GROUP BY H.custid, H.invoicedate, H.facility,I.po,H.invoice,I.statususer;

  l_custid    varchar2(10);
  l_facility  varchar2(3);
  cr_total number;
  db_total number;
  i_total number;
  l_po VARCHAR2 (20);
  invoice_date date;
  l_invoice number;
  l_shippername VARCHAR2 (40);
  l_statususer VARCHAR2(4);
  l_short_facility varchar(7);

  CURSOR C_INVD(in_invoice number)
  IS
    SELECT D.facility, D.activity,D.INVTYPE, D.custid, D.billedqty, D.LASTUSER, D.billedamt, D.billedrate,
           D.item, D.lotnumber, nvl(D.calcedUOM, D.entereduom) uom,
           D.calceduom, D.orderid, D.shipid, nvl(D.minimum,0) minimumord,
           A.descr actdescr, A.glacct, I.descr itemdescr, D.comment1,
           H.reference, H.po, D.INVDATE, H.SHIPPERNAME,d.invoice,nvl(H.shippername,C.shipper) as shippername1
      FROM orderhdr H, custitem I, activity A, invoicedtl D, custshipper C
     WHERE D.invoice = in_invoice
       AND D.custid = I.custid(+)
       AND D.item = I.item(+)
       AND D.activity = A.code(+)
       AND D.orderid = H.orderid(+)
       AND D.shipid = H.shipid(+)
       AND D.billstatus != zbill.DELETED
       AND H.custid=C.custid
      ORDER BY D.item, D.orderid, D.lotnumber, D.activity, nvl(D.minimum,0);

  CURSOR C_DFT(in_id char)
  IS
    SELECT substr(defaultvalue,1,5)
      FROM systemdefaults
     WHERE defaultid = in_id;

  CURSOR C_SHIPPER(l_custid number)
  IS
    SELECT nvl(o.shippername,c.shipper)
      FROM orderhdr o,custshipper c
     WHERE o.custid = l_custid
       AND o.custid=c.custid;



l_araccount varchar2(5);

linenum integer;
l_seq integer;
cmt varchar2(4001);
str varchar2(80);

len integer;
tpos integer;
tcur integer;
tcnt integer;

errmsg varchar2(100);
mark varchar2(2000);
mark1 varchar2(5000);
strUser char(5);
l_COL char(3);
procedure debugmsg(in_text varchar2) is

cntChar integer;
strMsg varchar2(255);
begin

if strDebugYN <> 'Y' then
  return;
end if;

cntChar := 1;
while (cntChar * 60) < (Length(in_text)+60)
loop
  zut.prt(substr(in_text,((cntChar-1)*60)+1,60));
  cntChar := cntChar + 1;
end loop;

exception when others then
  null;
end;

begin

mark := 'Start';
if out_errorno = -12345 then
  strDebugYN := 'Y';
  debugmsg('debug is on');
else
  strDebugYN := 'N';
end if;

out_errorno := 0;
out_msg := '';

select abbrev into startdate
   from lastlawsonbill_all
   where rtrim(code) = 'ALLALL';

select to_char(sysdate, 'YYMMDDHH24MISS') into endDate from dual;

debugmsg('start ' || startDate);

debugmsg('end   ' || endDate);


update lastlawsonbill_all
   set abbrev = endDate
   where rtrim(code) = 'ALLALL';


viewcount := 1;
while(1=1)
loop
  strSuffix := rtrim(upper(in_custid)) || viewcount;
  select count(1)
    into cntRows
    from user_tables
   where table_name = 'LAWSONHDREX_DBARAIT_' || strSuffix;
  if cntRows = 0 then
    exit;
  else
    viewcount := viewcount + 1;
  end if;
end loop;

if in_custid != 'ALL' then
    out_errorno := -1;
    out_msg := 'Invalid Customer Code';
    return;
end if;

    l_araccount := '';

    OPEN C_DFT('ARACCOUNT');
    FETCH C_DFT into l_araccount;
    CLOSE C_DFT;

cmdsql := 'CREATE TABLE lawsonhdrex_dbarait_' || strSuffix ||
' (   SESSIONID   VARCHAR2(8 BYTE), '||
'  DAITCMPNY   VARCHAR2(4 BYTE),  '||
'  DAITTRNSTY  VARCHAR2(1 BYTE),  '||
'  DAITINVC    VARCHAR2(22 BYTE),  '||
'  DAITPYMNTS  NUMBER(9),  '||
'  DAITCSTMR   VARCHAR2(9),  '||
'  DAITSTATUS  NUMBER(4),  '||
'  DAITGLSTTS  NUMBER(4),  '||
'  DAITLSSTDT  DATE,  '||
'  DAITBTCNBR  NUMBER(9),  '||
'  DAITPRCSLV  VARCHAR2(5),  '||
'  DAITTRNSDT  DATE,  '||
'  DAITGLDATE  DATE,  '||
'  DAITAPPLDS  NUMBER(9),  '||
'  DAITLSFCDT  DATE,  '||
'  DAITCSPNBR  VARCHAR2(22 BYTE),  '||
'  DAITXRFCMP  NUMBER(4),  '||
'  DAITXRFTYP  NUMBER(1),  '||
'  DAITXRFNBR  VARCHAR2(22 BYTE),  '||
'  DAITXRFSQ   NUMBER(9),  '||
'  DAITDESC    VARCHAR2(30 BYTE),  '||
'  DAITARCODE  VARCHAR2(4 BYTE),  '||
'  DAITSLSMN   VARCHAR2(4 BYTE),  '||
'  DAITTRNUSR  VARCHAR2(10 BYTE),  '||
'  DAITTRUSR2  VARCHAR2(15 BYTE),  '||
'  DAITTRUSR3  DATE,  '||
'  DAITTRUSR4  NUMBER(9),  '||
'  DAITTRUSR5  NUMBER(18,2),  '||
'  DAITORGCRR  VARCHAR2(5 BYTE),  '||
'  DAITORGRT   NUMBER(14,7),  '||
'  DAITCRRMDV  VARCHAR2(1 BYTE),  '||
'  DAITORGAMT  NUMBER(18,2),  '||
'  DAITGRPRT   NUMBER(14,7),  '||
'  DAITGRPMDV  VARCHAR2(1 BYTE),  '||
'  DAITORAPAM  NUMBER(18,2),  '||
'  DAITORADAM  NUMBER(18,2),  '||
'  DAITRVLFL   VARCHAR2(1 BYTE),  '||
'  DAITORIGND  VARCHAR2(4 BYTE),  '||
'  DAITTRMSCD  VARCHAR2(5 BYTE),  '||
'  DAITBNINCD  VARCHAR2(3 BYTE),  '||
'  DAITOPORDS  NUMBER(18,2),  '||
'  DAITDSSCDS  DATE,  '||
'  DAITDSCPCT  NUMBER(7,7),  '||
'  DAITDDT     DATE,  '||
'  DAITDSCAMT  NUMBER(18,2),  '||
'  DAITBILLTO  VARCHAR2(4 BYTE),  '||
'  DAITJRBKNB  VARCHAR2(12 BYTE),  '||
'  DAITATAPFL  VARCHAR2(1 BYTE),  '||
'  DAITACTVTY  VARCHAR2(15 BYTE),  '||
'  DAITACCCTG  VARCHAR2(5 BYTE),  '||
'  DAITALTTYP  VARCHAR2(1 BYTE),  '||
'  DAITSMLN    VARCHAR2(1 BYTE),  '||
'  DAITSYSTEM  VARCHAR2(2 BYTE),  '||
'  DAITINOBID  VARCHAR2(12 BYTE),  '||
'  DAITUSFL01  VARCHAR2(20 BYTE),  '||
'  DAITUSFL02  VARCHAR2(20 BYTE),  '||
'  DAITUSFL03  VARCHAR2(20 BYTE),  '||
'  DAITUSFL04  VARCHAR2(20 BYTE),  '||
'  DAITUSFL05  VARCHAR2(20 BYTE),  '||
'  DAITACCSID  NUMBER(5),  '||
'  DAITSORT1   VARCHAR2(32 BYTE),  '||
'  DAITSORT2   VARCHAR2(32 BYTE),  '||
'  DAITSORT3   VARCHAR2(32 BYTE),  '||
'  DAITSORT4   VARCHAR2(32 BYTE),  '||
'  DAITFBCD    VARCHAR2(3 BYTE),  '||
'  DAITPORTCD  VARCHAR2(5 BYTE),  '||
'  DAITNOTC    VARCHAR2(2 BYTE),  '||
'  DAITSTTPRC  VARCHAR2(6 BYTE),  '||
'  DAITORGCNT  VARCHAR2(2 BYTE),  '||
'  DAITDSCN    VARCHAR2(2 BYTE),  '||
'  DAITORGRGN  VARCHAR2(2 BYTE),  '||
'  DAITDSTRGN  VARCHAR2(2 BYTE),  '||
'  DAITDRSHIN  VARCHAR2(1 BYTE),  '||
'  DAITTRNSPR  VARCHAR2(1 BYTE),  '||
'  DAITCNTRCT  VARCHAR2(15 BYTE),  '||
'  DAITACTGRP  VARCHAR2(15 BYTE), '||
'  invoice     number(8))';
dbms_output.put_line(cmdsql);
curFunc := dbms_sql.open_cursor;
dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
cntRows := dbms_sql.execute(curFunc);
dbms_sql.close_cursor(curFunc);

    for cph in C_PH(startDate, endDate) loop
        mark := 'C_PH';

        masterinvoice := substr(to_char(cph.invoice,'09999999'),2);

        IH := null;

        OPEN C_INVOICE(masterinvoice);
        FETCH C_INVOICE into IH;
        CLOSE C_INVOICE;

        OPEN C_FACILITY(IH.facility);
        FETCH C_FACILITY into FA;
        CLOSE C_FACILITY;

        mark := 'C_INVOICE';

	  		--if (cph.amount) < 0  then
			if ih.invtype = 'C' then 
           l_prefix := 'C';
        else
           l_prefix := 'I';
        end if;

        mark := 'BF INS DBARAIT HDR ';

       CTOT := null;
       OPEN C_INVTOTAL(masterinvoice);
       FETCH C_INVTOTAL into l_custid,invoice_date, l_facility,l_po, db_total, cr_total, i_total, l_invoice,l_statususer,l_short_facility;
       CLOSE C_INVTOTAL;

       OPEN C_SHIPPER(l_custid);
       FETCH C_SHIPPER into l_shippername;
       CLOSE C_SHIPPER;
  -- zut.prt('CUSTID:'||l_custid||' Date:'||to_char(invoice_date)||' DB/CR:'||
  --        to_char(db_total)||'/'||to_char(cr_total));
      mark := 'BF INS HDR DBARAIT' ;

      cmdsql := 'INSERT INTO lawsonhdrex_dbarait_' || strSuffix   ||
      ' (sessionid,daitcmpny,daittrnsty,daitinvc,daitcstmr,daitbtcnbr,daitprcslv, '||
      ' daittrnsdt,daitgldate,daitcspnbr,daitslsmn,daittrusr2,daitorgamt, invoice) '||
      ' VALUES (''' || strsuffix ||''','''
                    || ih.facility ||''','''
                    || l_prefix||
                     ''',(CASE WHEN TO_NUMBER(LENGTH('||cph.invoice||' )) < 8'||
                                    ' THEN LPAD('||cph.invoice||',8,0)||'' '||ih.invtype||
                           ''' WHEN TO_NUMBER(LENGTH('||cph.invoice||' )) >8 '||
                                    ' THEN SUBSTR('||cph.invoice||',-8)|| '||' '' '||ih.invtype||
                           ''' ELSE LPAD('||cph.invoice||' ,8,0)||'' '|| ih.invtype||
                     ''' END),(CASE WHEN TO_NUMBER(LENGTH('''||cph.custid||''' )) < 5'||
                                    ' THEN ''   7'' || LPAD('''||cph.custid||''',5,0)'||
                                    ' WHEN TO_NUMBER(LENGTH('''||cph.custid||''' )) >5 '||
                                    ' THEN ''   7'' || SUBSTR('''||cph.custid||''',-5) '||
                                    ' ELSE ''   7'' || LPAD('''||cph.custid||''' ,5,0) END), '||
            ' TO_CHAR(SYSDATE,''YDDD''),'''
            ||ih.facility||
            ''',to_date('''||cph.postdate||''',''DD-MON-YY''),'
            ||'to_date('''||cph.postdate||''',''DD-MON-YY''),'
            ||l_po||','''
            ||l_short_facility||''','''
            ||l_shippername||
            ''',DECODE('''||l_prefix||''',''C'',ABS('||cph.amount||'), ABS('||cph.amount||')), '||
            cph.invoice ||')';

	  debugmsg(cmdsql);
      curFunc := dbms_sql.open_cursor;
      dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
      cntRows := dbms_sql.execute(curFunc);
      mark := 'hello -->2 ' || cmdsql || '<--';
      dbms_sql.close_cursor(curFunc);

    end loop;
/* make the request to export the detail lines */
if nvl(strDebugYN, 'N') <>  'Y' then
   ziem.impexp_request('E',null,'ALL','Lawson Billing DBARAID',null,'NOW',0,
   0,0,'IMPEXP',null,null,null,'ALL','ALL',null,null,out_errorno,out_msg);
end if;

out_msg := 'OKAY';
out_errorno := viewcount;

exception when others then
  out_msg := 'zimbir '||mark1||'-' || sqlerrm;
  out_msg := 'zimbir '||mark||'-' || sqlerrm;
  out_errorno := sqlcode;
end begin_lawson_hdr_dbarait;


procedure begin_lawson_dtl_dbaraid
(in_custid IN varchar2
,out_errorno IN OUT NUMBER
,out_msg IN OUT varchar2
) is

curFunc integer;
cntRows integer;
cmdSql varchar2(32767);

curCompany integer;
cmdSqlCompany varchar2(255);
tblCompany varchar2(12);
tblWarehouse varchar2(12);
strSuffix varchar2(32);
viewcount integer;

TYPE cur_type is REF CURSOR;
cr cur_type;
curSql varchar2(2000);
cph posthdr%rowtype;

  CURSOR C_PH(in_begin char, in_end char)
  IS
    SELECT *
      FROM posthdr
     WHERE   postdate >= to_date(in_begin, 'YYYYMMDDHH24MISS')
       AND postdate < to_date(in_end, 'YYYYMMDDHH24MISS')
       --custid = '1027'
       ;

  CURSOR C_INVOICE(in_master char)
  RETURN invoicehdr%rowtype
  IS
    SELECT *
      FROM invoicehdr
     WHERE masterinvoice = in_master
     ORDER BY invtype, invoice;

  CURSOR C_FACILITY(in_facility char)
  RETURN facility%rowtype
  IS
    SELECT *
      FROM facility
     WHERE facility = in_facility;

  masterinvoice varchar2(8);
  IH invoicehdr%rowtype;
  FA facility%rowtype;
  CTOT invoicehdr%rowtype;
  l_prefix    varchar2(2);


    CURSOR C_INVTOTAL(in_master varchar2)

  IS
    SELECT H.custid, H.invoicedate, H.facility,nvl(I.po,'null'),
        SUM(nvl(decode(H.invtype,'C',
                  decode(sign(I.billedamt),-1,abs(I.billedamt),0),
                  decode(sign(I.billedamt),-1,0,abs(I.billedamt))
                    ),0)),
        SUM(nvl(decode(H.invtype,'C',
                  decode(sign(I.billedamt),-1,0,abs(I.billedamt)),
                  decode(sign(I.billedamt),-1,abs(I.billedamt),0)
                    ),0)),sum(I.billedamt) ,H.invoice
      FROM invoicedtl I, invoicehdr H
     WHERE H.masterinvoice = in_master
       AND H.invoice = I.invoice(+)
       AND I.billstatus(+) != zbill.DELETED
      GROUP BY H.custid, H.invoicedate, H.facility,I.po,H.invoice;

  l_custid    varchar2(10);
  l_facility  varchar2(3);
  cr_total number;
  db_total number;
  i_total number;
  l_po VARCHAR2 (20);
  invoice_date date;
  l_invoice number;
 -- l_lastuser :='EXP';

  CURSOR C_INVD(in_invoice number)
  IS
    SELECT D.facility, D.activity,D.INVTYPE, D.custid, D.billedqty, D.LASTUSER, D.billedamt, D.billedrate,
           D.item, D.lotnumber, nvl(D.calcedUOM, D.entereduom) uom,
           D.calceduom, D.orderid, D.shipid, nvl(D.minimum,0) minimumord,
           A.descr actdescr, A.glacct, I.descr itemdescr, D.comment1,
           H.reference, H.po, D.INVDATE, H.SHIPPERNAME,d.invoice
      FROM orderhdr H, custitem I, activity A, invoicedtl D
     WHERE D.invoice = in_invoice
       AND D.custid = I.custid(+)
       AND D.item = I.item(+)
       AND D.activity = A.code(+)
       AND D.orderid = H.orderid(+)
       AND D.shipid = H.shipid(+)
       AND D.billstatus != zbill.DELETED
      ORDER BY D.item, D.orderid, D.lotnumber, D.activity, nvl(D.minimum,0);

  CURSOR C_DFT(in_id char)
  IS
    SELECT substr(defaultvalue,1,5)
      FROM systemdefaults
     WHERE defaultid = in_id;

l_araccount varchar2(5);

linenum integer;
l_seq integer;
cmt varchar2(4001);
str varchar2(80);

len integer;
tpos integer;
tcur integer;
tcnt integer;

errmsg varchar2(100);
mark varchar2(2000);
mark1 varchar2(5000);
strUser char(5);
l_COL char(3);
strDebugYN char(1);
procedure debugmsg(in_text varchar2) is

cntChar integer;
strMsg varchar2(255);
begin

if strDebugYN <> 'Y' then
  return;
end if;

cntChar := 1;
while (cntChar * 60) < (Length(in_text)+60)
loop
  zut.prt(substr(in_text,((cntChar-1)*60)+1,60));
  cntChar := cntChar + 1;
end loop;
end;

begin
if out_errorno = -12345 then
  strDebugYN := 'Y';
  debugmsg('debug is on');
else
  strDebugYN := 'N';
end if;
mark := 'Start';

out_errorno := 0;
out_msg := '';

viewcount := 1;
while(1=1)
loop
  strSuffix := translate(rtrim(upper(in_custid)),'----------','__________') || viewcount;
  select count(1)
    into cntRows
    from user_tables
   where table_name = 'LAWSONHDREX_DBARAIT_' || strSuffix;
  if cntRows = 0 then
    exit;
  else
    viewcount := viewcount + 1;
  end if;
end loop;
viewcount := viewcount - 1;
strSuffix := translate(rtrim(upper(in_custid)),'----------','__________') || viewcount;

debugmsg('view count ' || viewcount);
if in_custid != 'ALL' then
    out_errorno := -1;
    out_msg := 'Invalid Customer Code';
    return;
end if;

l_araccount := '';

OPEN C_DFT('ARACCOUNT');
FETCH C_DFT into l_araccount;
CLOSE C_DFT;

l_COL := 'EXP';
cmdsql := 'CREATE TABLE LAWSONDTLEX_DBARAID_' || strSuffix ||
' (   SESSIONID   VARCHAR2(8), '||
  ' DAIDCMPNY   VARCHAR2(4),  '||
  ' DAIDCSTMR   VARCHAR2(9),         '||
  ' DAIDTRNSTY  VARCHAR2(1),  '||
  ' DAIDINVC    VARCHAR2(22), '||
  ' DAIDPRGSQN  NUMBER(9),         '||
  ' DAIDGLCMPN  NUMBER(4),         '||
  ' DAIDACCUNT  VARCHAR2(15),        '||
  ' DAIDACCNT   VARCHAR2(9),         '||
  ' DAIDSBACCT  NUMBER(4),         '||
  ' DAIDORGAMT  NUMBER(18,2),      '||
  ' DAIDUNITS   NUMBER(15,2),      '||
  ' DAIDDSCRPT  VARCHAR2(30), '||
  ' DAIDACTVTY  VARCHAR2(15), '||
  ' DAIDACCCTG  VARCHAR2(5),  '||
  ' DAIDTXCD    VARCHAR2(10), '||
  ' DAIDORGTXB  NUMBER(18,2),      '||
  ' DAIDJBSQNB  NUMBER(10),        '||
  ' DAIDTXPNT   NUMBER(1),         '||
  ' DAIDLNTYP   NUMBER(1),         '||
  ' DAIDWEIGHT  NUMBER(9,3),       '||
  ' DAIDICNCD   NUMBER(8),         '||
  ' DAIDSPLQTY  NUMBER(13))';
debugmsg(cmdSql);
curFunc := dbms_sql.open_cursor;
dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
cntRows := dbms_sql.execute(curFunc);
dbms_sql.close_cursor(curFunc);

  -- zut.prt('CUSTID:'||l_custid||' Date:'||to_char(invoice_date)||' DB/CR:'||
  --        to_char(db_total)||'/'||to_char(cr_total));

 mark := 'BF INS HDR before insert' ;

   curSql := 'select * from posthdr ' ||
              'where invoice in (select invoice from LAWSONHDREX_DBARAIT_' || strSuffix || ')';
   debugmsg(cmdsql);
   open cr for curSql;

   loop
      fetch cr into cph;
      exit when cr%notfound;
      debugmsg(' invoice ' || cph.invoice);
--    for cph in C_PH(in_begdatestr, in_enddatestr) loop
        mark := 'C_PH';

        masterinvoice := substr(to_char(cph.invoice,'09999999'),2);

        IH := null;

        OPEN C_INVOICE(masterinvoice);
        FETCH C_INVOICE into IH;
        CLOSE C_INVOICE;

        OPEN C_FACILITY(IH.facility);
        FETCH C_FACILITY into FA;
        CLOSE C_FACILITY;

        mark := 'C_INVOICE';

        mark := 'BF INS HDR KAL';

    CTOT := null;
  OPEN C_INVTOTAL(masterinvoice);
  FETCH C_INVTOTAL into l_custid,invoice_date, l_facility,l_po, db_total, cr_total, i_total, l_invoice;
  CLOSE C_INVTOTAL;

    -- cursor loop for invoicehdr to place in proper order if multiples
       linenum := 0;

        mark := 'BF C_INVOICE LOOP';
       for cih in C_INVOICE(masterinvoice) loop
           -- zut.prt('  Invoice: '||cih.invoice||' Type:'||cih.invtype);
   -- cursor loop for invoicedtl in the proper sort order !!!!
           mark := 'BF C_INVD';
           for cid in C_INVD(cih.invoice) loop
              linenum := linenum + 1;
              -- zut.prt('      Itm:'||cid.item||'/'||cid.lotnumber
              --     ||' Act:'||cid.activity
              --     ||'/'||cid.actdescr||' - '||cid.itemdescr);
              mark := 'BF INS DTL1';

		if (cid.billedamt) < 0 then
           l_prefix := 'C';
        else
           l_prefix := 'I';
        end if;

mark := 'BF INS HDR before insert' ;

cmdsql := 'INSERT INTO LAWSONDTLEX_DBARAID_' || strSuffix   ||
' (sessionid, daidcmpny, daidcstmr, daidtrnsty, daidinvc, daidprgsqn,  '||
' daidglcmpn, daidaccunt, daidaccnt, daidsbacct, daidorgamt, daidunits, '||
' daiddscrpt,daidactvty, daidaccctg, daidtxcd, daidorgtxb, daidjbsqnb, '||
' daidtxpnt, daidlntyp, daidweight, daidicncd, daidsplqty) '||
' VALUES (''' || strsuffix ||''','''
||ih.facility||
''',(CASE WHEN TO_NUMBER(LENGTH('||cph.custid||' )) < 5 THEN ''   7'' ||LPAD('||cph.custid||',5,0)'||
' WHEN TO_NUMBER(LENGTH('||cph.custid||' )) >5 '||
' THEN ''   7'' || SUBSTR('||cph.custid||',-5) '||
' ELSE ''   7'' || LPAD('
||cph.custid||
' ,5,0) END),'''
||l_prefix||''',(CASE WHEN TO_NUMBER(LENGTH('||cph.invoice||' )) < 8'||
' THEN LPAD('||cph.invoice||',8,0)||'' '||cih.invtype||
''' WHEN TO_NUMBER(LENGTH('||cph.invoice||' )) >8 '||
' THEN SUBSTR('||cph.invoice||',-8)|| '||' '' '||cih.invtype||
''' ELSE LPAD('||cph.invoice||' ,8,0)||'' '|| cih.invtype||''' END),'
||linenum||
',null,'''||ih.facility||
''','''||cid.glacct||''',
NULL,
DECODE('''||l_prefix||''',''C'', ABS('||cid.billedamt||'), - ('||cid.billedamt||')),
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL)';
debugmsg(cmdsql);
curFunc := dbms_sql.open_cursor;
dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
cntRows := dbms_sql.execute(curFunc);
mark := 'hello -->2 ' || cmdsql || '<--';
dbms_sql.close_cursor(curFunc);
          end loop;
       end loop;
    end loop;
close cr;
out_msg := 'OKAY';
out_errorno := viewcount;

exception when others then
  out_msg := 'zimbir '||mark1||'-' || sqlerrm;
  out_msg := 'zimbir '||mark||'-' || sqlerrm;
  out_errorno := sqlcode;
end begin_lawson_dtl_dbaraid;

----------------------------------------------------------------------
-- end_lawson_dbaraid
----------------------------------------------------------------------
procedure end_lawson_dtl_dbaraid
(in_custid IN varchar2
,in_viewsuffix IN varchar2
,out_errorno IN OUT NUMBER
,out_msg IN OUT varchar2
) is

curFunc integer;
cntRows integer;
cmdSql varchar2(20000);

strSuffix varchar2(32);

begin

out_errorno := 0;
out_msg := '';

strSuffix := rtrim(upper(in_custid)) || in_viewsuffix;

cmdSql := 'drop table lawsonhdrex_dbarait_' || strSuffix;
curFunc := dbms_sql.open_cursor;
dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
cntRows := dbms_sql.execute(curFunc);
dbms_sql.close_cursor(curFunc);

cmdSql := 'drop table lawsondtlex_dbaraid_' || strSuffix;
curFunc := dbms_sql.open_cursor;
dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
cntRows := dbms_sql.execute(curFunc);
dbms_sql.close_cursor(curFunc);

out_msg := 'OKAY';
out_errorno := 0;

exception when others then
  out_msg := 'zimeir ' || sqlerrm;
  out_errorno := sqlcode;
end end_lawson_dtl_dbaraid;

procedure begin_intacct
(in_custid IN varchar2
,out_errorno IN OUT NUMBER
,out_msg IN OUT varchar2
) is

CURSOR C_PH(in_begin char, in_end char)
IS
    SELECT *
      FROM posthdr
     WHERE postdate >= to_date(in_begin, 'YYMMDDHH24MISS')
       AND postdate < to_date(in_end, 'YYMMDDHH24MISS');

CURSOR C_INVTOTAL(in_master varchar2)
IS
    SELECT H.custid, H.invoicedate, H.facility, H.invtype,
       sum(nvl(decode(H.invtype,'C',
           decode(sign(I.billedamt),-1,abs(I.billedamt),0),
           decode(sign(I.billedamt),-1,0,abs(I.billedamt))
           ),0)) db_total,
       sum(nvl(decode(H.invtype,'C',
           decode(sign(I.billedamt),-1,0,abs(I.billedamt)),
           decode(sign(I.billedamt),-1,abs(I.billedamt),0)
           ),0)) cr_total
 FROM invoicedtl I, invoicehdr H
WHERE H.masterinvoice = in_master
  AND H.invoice = I.invoice(+)
  AND I.billstatus(+) != zbill.DELETED
GROUP BY H.custid, H.invoicedate, H.facility, H.invtype;
CTOTAL C_INVTOTAL%rowtype;
  
CURSOR C_INVDTL(in_master varchar2)
IS
    SELECT I.facility,
           A.glacct,
           SUM(I.billedamt) billedamt
      FROM activity A, invoicedtl I, invoicehdr H
     WHERE H.masterinvoice = in_master
       AND I.invoice = H.invoice
       AND A.code = I.activity
       AND I.billstatus != zbill.DELETED
    GROUP BY I.facility, A.glacct;

CURSOR C_INVOICETERMS(in_custid varchar2)
IS
    SELECT descr
      FROM invoiceterms
    WHERE CODE = (SELECT invoiceterms_code
                    FROM customer_aux
                   WHERE custid = in_custid);
CTERMS C_INVOICETERMS%rowtype;

CURSOR C_ARDAYS(in_custid varchar2)
IS
   SELECT AR.abbrev
     FROM AR_DAYS AR,
          INVOICETERMS IT
    WHERE trim(AR.descr) = trim(IT.descr)
      AND IT.code = (SELECT invoiceterms_code
                        FROM customer_aux
                       WHERE custid = in_custid);
CDAYS C_ARDAYS%rowtype;

curFunc integer;
cntRows integer;
cmdSql varchar2(32767);
startDate varchar2(20);
endDate varchar2(20);
strDebugYN char(1);
strSuffix varchar2(32);
viewcount integer;
masterinvoice varchar2(8);
gCustid varchar2(15);
gLineno number(8);
gPrevInvoice number(8);
gAmount number(10,2);
gDueDate date;
gLocation_id varchar2(10);
gDept_id varchar2(10);
ARDays number;
gPO varchar2(255);

procedure debugmsg(in_text varchar2) is
cntChar integer;
strMsg varchar2(255);
begin
if strDebugYN <> 'Y' then
  return;
end if;
cntChar := 1;
while (cntChar * 60) < (Length(in_text)+60)
loop
  zut.prt(substr(in_text,((cntChar-1)*60)+1,60));
  cntChar := cntChar + 1;
end loop;
exception when others then
  null;
end;

begin

if out_errorno = -12345 then
  strDebugYN := 'Y';
else
  strDebugYN := 'N';
end if;

out_errorno := 0;
out_msg := '';

select abbrev into startdate
   from lastintacctbill_all
   where rtrim(code) = 'ALLALL';

select to_char(sysdate, 'YYMMDDHH24MISS') into endDate from dual;

debugmsg('start ' || startDate);
debugmsg('end   ' || endDate);

update lastintacctbill_all
   set abbrev = endDate
   where rtrim(code) = 'ALLALL';
viewcount := 1;

begin
   select abbrev into ARDays
      from AR_DAYS
      where code = 'DAYS';
exception when others then
   ARDays := 30;
end;

while(1=1)
loop
  strSuffix := rtrim(upper(in_custid)) || viewcount;
  select count(1)
    into cntRows
    from user_tables
   where table_name = 'BILL_EXPORT_INTACCT_' || strSuffix;
  if cntRows = 0 then
    exit;
  else
    viewcount := viewcount + 1;
  end if;
end loop;

if in_custid != 'ALL' then
    out_errorno := -1;
    out_msg := 'Invalid Customer Code';
    return;
end if;

gLineno := 1;
gPrevInvoice := 0;

cmdSql := 'create table BILL_EXPORT_INTACCT_' || strSuffix ||
' (IDX varchar2(255), DONOTIMPORT varchar2(255), BATCH_TITLE varchar2(255), INVOICE_NO varchar2(255), PO_NO varchar2(255), '||
' CUSTOMER_ID varchar2(255), CREATED_DATE varchar2(255), DUE_DATE varchar2(255), TOTAL_DUE varchar2(255), '||
' TOTAL_PAID varchar2(255), PAID_DATE varchar2(255), TERM_NAME varchar2(25), DESCRIPTION varchar2(255), '||
' BASECURR varchar2(255), CURRENCY varchar2(255), EXCH_RATE_DATE varchar2(255), '||
' EXCH_RATE_TYPE_ID varchar2(255), EXCHANGE_RATE varchar2(255), '||
' LINE_NO varchar2(255), MEMO varchar2(255), ACCT_NO varchar2(75), '||
' ACCT_LABEL varchar2(30), LOCATION_ID varchar2(255), DEPT_ID varchar2(255), '||
' ALLOCATION_ID varchar2(255), AMOUNT varchar2(255), SUBTOTAL varchar2(255), '||
' REVREC_TEMPLATE varchar2(255), REVREC_STARTDATE varchar2(255), DEFERREDREV_ACCOUNT varchar2(255), '||
' REVREC_JOURNAL varchar2(255), REVREC_SCHEDULE_LINE_NO varchar2(255),REVENUE_ACCOUNT varchar2(255),'||
' REVREC_POSTINGDATE varchar2(255), REVREC_AMOUNT varchar2(255), ARINVOICEITEM_CUSTOMERID varchar2(255), '||
' ARINVOICEITEM_VENDORID varchar2(255), ARINVOICESUBTOTALS_CUSTOMERID varchar2(255), '||
' ARINVOICESUBTOTALS_VENDORID varchar2(255), ACCRUAL_TEXT_1 varchar2(255), '||
' ACCRUAL_AMOUNT_1 varchar2(255), ACCRUAL_TEXT_2 varchar2(255), ACCRUAL_AMOUNT_2 varchar2(255))';

debugmsg(cmdSql);
curFunc := dbms_sql.open_cursor;
dbms_sql.parse(curFunc, cmdSql, dbms_sql.native);
cntRows := dbms_sql.execute(curFunc);
dbms_sql.close_cursor(curFunc);

curFunc := dbms_sql.open_cursor;
dbms_sql.parse(curFunc, 'insert into BILL_EXPORT_INTACCT_' || strSuffix ||
' values (:IDX, :DONOTIMPORT, :BATCH_TITLE, :INVOICE_NO, :PO_NO, :CUSTOMER_ID, :CREATED_DATE, :DUE_DATE, :TOTAL_DUE, :TOTAL_PAID, '||
' :PAID_DATE, :TERM_NAME, :DESCRIPTION, :BASECURR, :CURRENCY, :EXCH_RATE_DATE, :EXCH_RATE_TYPE_ID, :EXCHANGE_RATE, '||
' :LINE_NO, :MEMO, :ACCT_NO, :ACCT_LABEL, :LOCATION_ID, :DEPT_ID, :ALLOCATION_ID, :AMOUNT, :SUBTOTAL, :REVREC_TEMPLATE, '||
' :REVREC_STARTDATE, :DEFERREDREV_ACCOUNT,  :REVREC_JOURNAL,  :REVREC_SCHEDULE_LINE_NO, :REVENUE_ACCOUNT, '||
' :REVREC_POSTINGDATE, :REVREC_AMOUNT, :ARINVOICEITEM_CUSTOMERID, :ARINVOICEITEM_VENDORID, :ARINVOICESUBTOTALS_CUSTOMERID, '||
' :ARINVOICESUBTOTALS_VENDORID, :ACCRUAL_TEXT_1, :ACCRUAL_AMOUNT_1, :ACCRUAL_TEXT_2, :ACCRUAL_AMOUNT_2)',
dbms_sql.native);
dbms_sql.bind_variable(curFunc, ':IDX', '0');
dbms_sql.bind_variable(curFunc, ':DONOTIMPORT', 'DONOTIMPORT');
dbms_sql.bind_variable(curFunc, ':BATCH_TITLE', 'BATCH_TITLE');
dbms_sql.bind_variable(curFunc, ':INVOICE_NO', 'INVOICE_NO');
dbms_sql.bind_variable(curFunc, ':PO_NO', 'PO_NO');
dbms_sql.bind_variable(curFunc, ':CUSTOMER_ID', 'CUSTOMER_ID');
dbms_sql.bind_variable(curFunc, ':CREATED_DATE', 'CREATED_DATE');
dbms_sql.bind_variable(curFunc, ':DUE_DATE', 'DUE_DATE');
dbms_sql.bind_variable(curFunc, ':TOTAL_DUE', 'TOTAL_DUE');
dbms_sql.bind_variable(curFunc, ':TOTAL_PAID', 'TOTAL_PAID');
dbms_sql.bind_variable(curFunc, ':PAID_DATE', 'PAID_DATE');
dbms_sql.bind_variable(curFunc, ':TERM_NAME', 'TERM_NAME');
dbms_sql.bind_variable(curFunc, ':DESCRIPTION', 'DESCRIPTION');
dbms_sql.bind_variable(curFunc, ':BASECURR', 'BASECURR');
dbms_sql.bind_variable(curFunc, ':CURRENCY', 'CURRENCY');
dbms_sql.bind_variable(curFunc, ':EXCH_RATE_DATE', 'EXCH_RATE_DATE');
dbms_sql.bind_variable(curFunc, ':EXCH_RATE_TYPE_ID', 'EXCH_RATE_TYPE_ID');
dbms_sql.bind_variable(curFunc, ':EXCHANGE_RATE', 'EXCHANGE_RATE');
dbms_sql.bind_variable(curFunc, ':LINE_NO', 'LINE_NO');
dbms_sql.bind_variable(curFunc, ':MEMO', 'MEMO');
dbms_sql.bind_variable(curFunc, ':ACCT_NO', 'ACCT_NO');
dbms_sql.bind_variable(curFunc, ':ACCT_LABEL', 'ACCT_LABEL');
dbms_sql.bind_variable(curFunc, ':LOCATION_ID', 'LOCATION_ID');
dbms_sql.bind_variable(curFunc, ':DEPT_ID', 'DEPT_ID');
dbms_sql.bind_variable(curFunc, ':ALLOCATION_ID', 'ALLOCATION_ID');
dbms_sql.bind_variable(curFunc, ':AMOUNT', 'AMOUNT');
dbms_sql.bind_variable(curFunc, ':SUBTOTAL', 'SUBTOTAL');
dbms_sql.bind_variable(curFunc, ':REVREC_TEMPLATE', 'REVREC_TEMPLATE');
dbms_sql.bind_variable(curFunc, ':REVREC_STARTDATE', 'REVREC_STARTDATE');
dbms_sql.bind_variable(curFunc, ':DEFERREDREV_ACCOUNT', 'DEFERREDREV_ACCOUNT');
dbms_sql.bind_variable(curFunc, ':REVREC_JOURNAL', 'REVREC_JOURNAL');  
dbms_sql.bind_variable(curFunc, ':REVREC_SCHEDULE_LINE_NO', 'REVREC_SCHEDULE_LINE_NO');  
dbms_sql.bind_variable(curFunc, ':REVENUE_ACCOUNT', 'REVENUE_ACCOUNT');  
dbms_sql.bind_variable(curFunc, ':REVREC_POSTINGDATE', 'REVREC_POSTINGDATE');  
dbms_sql.bind_variable(curFunc, ':REVREC_AMOUNT', 'REVREC_AMOUNT');  
dbms_sql.bind_variable(curFunc, ':ARINVOICEITEM_CUSTOMERID', 'ARINVOICEITEM_CUSTOMERID');  
dbms_sql.bind_variable(curFunc, ':ARINVOICEITEM_VENDORID', 'ARINVOICEITEM_VENDORID');  
dbms_sql.bind_variable(curFunc, ':ARINVOICESUBTOTALS_CUSTOMERID', 'ARINVOICESUBTOTALS_CUSTOMERID');  
dbms_sql.bind_variable(curFunc, ':ARINVOICESUBTOTALS_VENDORID', 'ARINVOICESUBTOTALS_VENDORID');  
dbms_sql.bind_variable(curFunc, ':ACCRUAL_TEXT_1', 'ACCRUAL_TEXT_1');
dbms_sql.bind_variable(curFunc, ':ACCRUAL_AMOUNT_1', 'ACCRUAL_AMOUNT_1');
dbms_sql.bind_variable(curFunc, ':ACCRUAL_TEXT_2', 'ACCRUAL_TEXT_2');  
dbms_sql.bind_variable(curFunc, ':ACCRUAL_AMOUNT_2', 'ACCRUAL_AMOUNT_2');
cntRows := dbms_sql.execute(curFunc);
dbms_sql.close_cursor(curFunc);

for cph in C_PH(startDate, endDate) loop
    masterinvoice := substr(to_char(cph.invoice,'09999999'),2);
    debugmsg('Custid/MasterInvoice: '||cph.custid||'/'||masterinvoice);

    CTOTAL := null;
    OPEN C_INVTOTAL(masterinvoice);
    FETCH C_INVTOTAL into CTOTAL;
    CLOSE C_INVTOTAL;
    debugmsg (CTOTAL.custid||'  '||CTOTAL.invoicedate||'  '||
              CTOTAL.facility||'  '||CTOTAL.invtype||'  '||
              CTOTAL.db_total||'  '||CTOTAL.cr_total);
    
    CTERMS := null;
    OPEN C_INVOICETERMS(cph.custid);
    FETCH C_INVOICETERMS into CTERMS;
    CLOSE C_INVOICETERMS;
    if CTERMS.descr is null then
    begin
      select descr
        into CTERMS.descr 
        from invoiceterms
       where code = '1';
    exception when others then
      CTERMS.descr := 'Net 1';
    end;
    end if;

    CDAYS.abbrev := null;
    OPEN C_ARDAYS(cph.custid);
    FETCH C_ARDAYS into CDAYS;
    CLOSE C_ARDAYS;
    if CDAYS.abbrev is null then
    begin
      select AR.abbrev
        into CDAYS.abbrev
       from  ar_days AR, invoiceterms IT
      where upper(trim(AR.descr)) = upper(trim(IT.descr))
        and IT.code = '1';
    exception when others then
      CDAYS.abbrev := '1';
    end;
    end if;

    select cph.postdate + CDAYS.abbrev into gDueDate from dual;

    for crec in C_INVDTL(masterinvoice) loop
        debugmsg('   glacct billedamt facility: '||crec.glacct||' '||crec.billedamt||' '||crec.facility);

        if cph.invoice <> gPrevInvoice then
          gLineno := 1;
          gPrevInvoice := cph.invoice;
        end if;

        if length(cph.custid) > 5 then
          gCustid := SUBSTR(cph.custid,-5);
        else
          gCustid := LPAD(cph.custid,5,0);
        end if;

        gAmount := crec.billedamt;
        if nvl(CTOTAL.invtype,'X') = 'C' then
          gAmount := gAmount * -1;
        end if;

        begin
          select po
            into gPO
            from invoicedtl
           where invoice = (select max(invoice) 
                              from invoicehdr 
                             where masterinvoice = masterinvoice);
        exception when others then
          null;
        end;
        
        if gLineno = 1 then
            curFunc := dbms_sql.open_cursor;
            dbms_sql.parse(curFunc, 'insert into BILL_EXPORT_INTACCT_' || strSuffix ||
            ' values (:IDX, :DONOTIMPORT, :BATCH_TITLE, :INVOICE_NO, :PO_NO, :CUSTOMER_ID, :CREATED_DATE, :DUE_DATE, :TOTAL_DUE, :TOTAL_PAID, '||
            ' :PAID_DATE, :TERM_NAME, :DESCRIPTION, :BASECURR, :CURRENCY, :EXCH_RATE_DATE, :EXCH_RATE_TYPE_ID, :EXCHANGE_RATE, '||
            ' :LINE_NO, :MEMO, :ACCT_NO, :ACCT_LABEL, :LOCATION_ID, :DEPT_ID, :ALLOCATION_ID, :AMOUNT, :SUBTOTAL, :REVREC_TEMPLATE, '||
            ' :REVREC_STARTDATE, :DEFERREDREV_ACCOUNT,  :REVREC_JOURNAL,  :REVREC_SCHEDULE_LINE_NO, :REVENUE_ACCOUNT, '||
            ' :REVREC_POSTINGDATE, :REVREC_AMOUNT, :ARINVOICEITEM_CUSTOMERID, :ARINVOICEITEM_VENDORID, :ARINVOICESUBTOTALS_CUSTOMERID, '||
            ' :ARINVOICESUBTOTALS_VENDORID, :ACCRUAL_TEXT_1, :ACCRUAL_AMOUNT_1, :ACCRUAL_TEXT_2, :ACCRUAL_AMOUNT_2)',
            dbms_sql.native);

        -- Header Lines
            dbms_sql.bind_variable(curFunc, ':IDX', masterinvoice||'-'||CTOTAL.invtype||'-'||to_char(gLineno));
            dbms_sql.bind_variable(curFunc, ':DONOTIMPORT', '');
            dbms_sql.bind_variable(curFunc, ':BATCH_TITLE', to_char(sysdate,'YDDD'));
            dbms_sql.bind_variable(curFunc, ':INVOICE_NO', masterinvoice||' '||CTOTAL.invtype);
            dbms_sql.bind_variable(curFunc, ':PO_NO', gPO);
            dbms_sql.bind_variable(curFunc, ':CUSTOMER_ID', gCustid);
            dbms_sql.bind_variable(curFunc, ':CREATED_DATE', to_char(cph.postdate,'MM/DD/YY'));
            dbms_sql.bind_variable(curFunc, ':DUE_DATE', to_char(gDueDate,'MM/DD/YY'));
            dbms_sql.bind_variable(curFunc, ':TOTAL_DUE', to_char(CTOTAL.db_total - CTOTAL.cr_total,'999999.99'));
            dbms_sql.bind_variable(curFunc, ':TOTAL_PAID', '');
            dbms_sql.bind_variable(curFunc, ':PAID_DATE', '');
            dbms_sql.bind_variable(curFunc, ':TERM_NAME', CTERMS.descr);
            dbms_sql.bind_variable(curFunc, ':DESCRIPTION', '');
            dbms_sql.bind_variable(curFunc, ':BASECURR', 'USD');
            dbms_sql.bind_variable(curFunc, ':CURRENCY', 'USD');
            dbms_sql.bind_variable(curFunc, ':EXCH_RATE_DATE', '');
            dbms_sql.bind_variable(curFunc, ':EXCH_RATE_TYPE_ID', '');
            dbms_sql.bind_variable(curFunc, ':EXCHANGE_RATE', '');

        -- Detail Lines
            dbms_sql.bind_variable(curFunc, ':LINE_NO', to_char(gLineno));
            dbms_sql.bind_variable(curFunc, ':MEMO', '');
            dbms_sql.bind_variable(curFunc, ':ACCT_NO', crec.glacct);
            dbms_sql.bind_variable(curFunc, ':ACCT_LABEL', '');

            select decode (substr(CTOTAL.facility, 1, 1), '5', '3', '2', '2') into gLocation_id from dual;
            dbms_sql.bind_variable(curFunc, ':LOCATION_ID',gLocation_id);

            select substr(CTOTAL.facility, 2, 2) into gDept_id from dual;
            dbms_sql.bind_variable(curFunc, ':DEPT_ID', trim(leading '0' from gDept_id));

            dbms_sql.bind_variable(curFunc, ':ALLOCATION_ID', '');
            dbms_sql.bind_variable(curFunc, ':AMOUNT', to_char(gAmount,'999999.99'));
            dbms_sql.bind_variable(curFunc, ':SUBTOTAL', '');
            dbms_sql.bind_variable(curFunc, ':REVREC_TEMPLATE', '');
            dbms_sql.bind_variable(curFunc, ':REVREC_STARTDATE', '');
            dbms_sql.bind_variable(curFunc, ':DEFERREDREV_ACCOUNT', '');
            dbms_sql.bind_variable(curFunc, ':REVREC_JOURNAL', '');  
            dbms_sql.bind_variable(curFunc, ':REVREC_SCHEDULE_LINE_NO', '');  
            dbms_sql.bind_variable(curFunc, ':REVENUE_ACCOUNT', '');  
            dbms_sql.bind_variable(curFunc, ':REVREC_POSTINGDATE', '');  
            dbms_sql.bind_variable(curFunc, ':REVREC_AMOUNT', '');  
            dbms_sql.bind_variable(curFunc, ':ARINVOICEITEM_CUSTOMERID', gCustid);  
            dbms_sql.bind_variable(curFunc, ':ARINVOICEITEM_VENDORID', '');  
            dbms_sql.bind_variable(curFunc, ':ARINVOICESUBTOTALS_CUSTOMERID', '');  
            dbms_sql.bind_variable(curFunc, ':ARINVOICESUBTOTALS_VENDORID', '');  
            dbms_sql.bind_variable(curFunc, ':ACCRUAL_TEXT_1', '');
            dbms_sql.bind_variable(curFunc, ':ACCRUAL_AMOUNT_1', '');
            dbms_sql.bind_variable(curFunc, ':ACCRUAL_TEXT_2', '');  
            dbms_sql.bind_variable(curFunc, ':ACCRUAL_AMOUNT_2', '');
            cntRows := dbms_sql.execute(curFunc);
            dbms_sql.close_cursor(curFunc);
        else
            curFunc := dbms_sql.open_cursor;
            dbms_sql.parse(curFunc, 'insert into BILL_EXPORT_INTACCT_' || strSuffix ||
            ' values (:IDX, :DONOTIMPORT, :BATCH_TITLE, :INVOICE_NO, :PO_NO, :CUSTOMER_ID, :CREATED_DATE, :DUE_DATE, :TOTAL_DUE, :TOTAL_PAID, '||
            ' :PAID_DATE, :TERM_NAME, :DESCRIPTION, :BASECURR, :CURRENCY, :EXCH_RATE_DATE, :EXCH_RATE_TYPE_ID, :EXCHANGE_RATE, '||
            ' :LINE_NO, :MEMO, :ACCT_NO, :ACCT_LABEL, :LOCATION_ID, :DEPT_ID, :ALLOCATION_ID, :AMOUNT, :SUBTOTAL, :REVREC_TEMPLATE, '||
            ' :REVREC_STARTDATE, :DEFERREDREV_ACCOUNT,  :REVREC_JOURNAL,  :REVREC_SCHEDULE_LINE_NO, :REVENUE_ACCOUNT, '||
            ' :REVREC_POSTINGDATE, :REVREC_AMOUNT, :ARINVOICEITEM_CUSTOMERID, :ARINVOICEITEM_VENDORID, :ARINVOICESUBTOTALS_CUSTOMERID, '||
            ' :ARINVOICESUBTOTALS_VENDORID, :ACCRUAL_TEXT_1, :ACCRUAL_AMOUNT_1, :ACCRUAL_TEXT_2, :ACCRUAL_AMOUNT_2)',
            dbms_sql.native);

        -- Header Lines
            dbms_sql.bind_variable(curFunc, ':IDX', masterinvoice||'-'||CTOTAL.invtype||'-'||to_char(gLineno));
            dbms_sql.bind_variable(curFunc, ':DONOTIMPORT', '');
            dbms_sql.bind_variable(curFunc, ':BATCH_TITLE', '');
            dbms_sql.bind_variable(curFunc, ':INVOICE_NO', '');
            dbms_sql.bind_variable(curFunc, ':PO_NO', '');
            dbms_sql.bind_variable(curFunc, ':CUSTOMER_ID', '');
            dbms_sql.bind_variable(curFunc, ':CREATED_DATE', '');
            dbms_sql.bind_variable(curFunc, ':DUE_DATE', '');
            dbms_sql.bind_variable(curFunc, ':TOTAL_DUE', '');
            dbms_sql.bind_variable(curFunc, ':TOTAL_PAID', '');
            dbms_sql.bind_variable(curFunc, ':PAID_DATE', '');
            dbms_sql.bind_variable(curFunc, ':TERM_NAME', '');
            dbms_sql.bind_variable(curFunc, ':DESCRIPTION', '');
            dbms_sql.bind_variable(curFunc, ':BASECURR', '');
            dbms_sql.bind_variable(curFunc, ':CURRENCY', '');
            dbms_sql.bind_variable(curFunc, ':EXCH_RATE_DATE', '');
            dbms_sql.bind_variable(curFunc, ':EXCH_RATE_TYPE_ID', '');
            dbms_sql.bind_variable(curFunc, ':EXCHANGE_RATE', '');

        -- Detail Lines
            dbms_sql.bind_variable(curFunc, ':LINE_NO', to_char(gLineno));
            dbms_sql.bind_variable(curFunc, ':MEMO', '');
            dbms_sql.bind_variable(curFunc, ':ACCT_NO', crec.glacct);
            dbms_sql.bind_variable(curFunc, ':ACCT_LABEL', '');

            select decode (substr(CTOTAL.facility, 1, 1), '5', '3', '2', '2') into gLocation_id from dual;
            dbms_sql.bind_variable(curFunc, ':LOCATION_ID',gLocation_id);

            select substr(CTOTAL.facility, 2, 2) into gDept_id from dual;
            dbms_sql.bind_variable(curFunc, ':DEPT_ID', trim(leading '0' from gDept_id));

            dbms_sql.bind_variable(curFunc, ':ALLOCATION_ID', '');
            dbms_sql.bind_variable(curFunc, ':AMOUNT', to_char(gAmount,'999999.99'));
            dbms_sql.bind_variable(curFunc, ':SUBTOTAL', '');
            dbms_sql.bind_variable(curFunc, ':REVREC_TEMPLATE', '');
            dbms_sql.bind_variable(curFunc, ':REVREC_STARTDATE', '');
            dbms_sql.bind_variable(curFunc, ':DEFERREDREV_ACCOUNT', '');
            dbms_sql.bind_variable(curFunc, ':REVREC_JOURNAL', '');  
            dbms_sql.bind_variable(curFunc, ':REVREC_SCHEDULE_LINE_NO', '');  
            dbms_sql.bind_variable(curFunc, ':REVENUE_ACCOUNT', '');  
            dbms_sql.bind_variable(curFunc, ':REVREC_POSTINGDATE', '');  
            dbms_sql.bind_variable(curFunc, ':REVREC_AMOUNT', '');  
            dbms_sql.bind_variable(curFunc, ':ARINVOICEITEM_CUSTOMERID', gCustid);  
            dbms_sql.bind_variable(curFunc, ':ARINVOICEITEM_VENDORID', '');  
            dbms_sql.bind_variable(curFunc, ':ARINVOICESUBTOTALS_CUSTOMERID', '');  
            dbms_sql.bind_variable(curFunc, ':ARINVOICESUBTOTALS_VENDORID', '');  
            dbms_sql.bind_variable(curFunc, ':ACCRUAL_TEXT_1', '');
            dbms_sql.bind_variable(curFunc, ':ACCRUAL_AMOUNT_1', '');
            dbms_sql.bind_variable(curFunc, ':ACCRUAL_TEXT_2', '');  
            dbms_sql.bind_variable(curFunc, ':ACCRUAL_AMOUNT_2', '');
            cntRows := dbms_sql.execute(curFunc);
            dbms_sql.close_cursor(curFunc);
        end if;
        gLineno := gLineno + 1;
    end loop;
end loop;

debugmsg('gLineno: '||gLineno);
out_msg := 'OKAY';
out_errorno := viewcount;

exception when others then
  out_msg := 'zimbia '||' - ' || sqlerrm;
  out_errorno := sqlcode;
end begin_intacct;

procedure end_intacct
(in_custid IN varchar2
,in_viewsuffix IN varchar2
,out_errorno IN OUT NUMBER
,out_msg IN OUT varchar2
)
is

cmdSql varchar2(255);
strSuffix varchar2(32);

begin

out_errorno := 0;
out_msg := '';

strSuffix := translate(rtrim(upper(in_custid)),'----------','__________') || in_viewsuffix;

for obj in (select object_name, object_type
              from user_objects
             where object_name like 'BILL_EXPORT_INTACCT_%_' || strSuffix
               and object_name != 'BILL_EXPORT_INTACCT_' || strSuffix )
loop

  cmdSql := 'drop ' || obj.object_type || ' ' || obj.object_name;

  execute immediate cmdSql;

end loop;

cmdsql := 'drop table BILL_EXPORT_INTACCT_' || strSuffix;
execute immediate cmdSql;

out_msg := 'OKAY';
out_errorno := 0;

exception when others then
  out_msg := 'zimesn945 ' || sqlerrm;
  out_errorno := sqlcode;
end end_intacct;

end zimportproc15;
/
show errors package body zimportproc15;
exit;
